{
  "chalk": {
    "pkg": {
      "name": "chalk",
      "version": "0.5.1",
      "description": "Terminal string styling done right. Created because the `colors` module does some really horrible things.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/sindresorhus/chalk"
      },
      "maintainers": [
        {
          "name": "Sindre Sorhus",
          "email": "sindresorhus@gmail.com",
          "url": "http://sindresorhus.com"
        },
        {
          "name": "Joshua Appelman",
          "email": "joshua@jbna.nl"
        }
      ],
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "mocha",
        "bench": "matcha benchmark.js"
      },
      "files": [
        "index.js"
      ],
      "keywords": [
        "color",
        "colour",
        "colors",
        "terminal",
        "console",
        "cli",
        "string",
        "ansi",
        "styles",
        "tty",
        "formatting",
        "rgb",
        "256",
        "shell",
        "xterm",
        "log",
        "logging",
        "command-line",
        "text"
      ],
      "dependencies": {
        "ansi-styles": "^1.1.0",
        "escape-string-regexp": "^1.0.0",
        "has-ansi": "^0.1.0",
        "strip-ansi": "^0.3.0",
        "supports-color": "^0.2.0"
      },
      "devDependencies": {
        "matcha": "^0.5.0",
        "mocha": "*"
      },
      "readme": "# <img width=\"300\" src=\"https://cdn.rawgit.com/sindresorhus/chalk/77ae94f63ab1ac61389b190e5a59866569d1a376/logo.svg\" alt=\"chalk\">\n\n> Terminal string styling done right\n\n[![Build Status](https://travis-ci.org/sindresorhus/chalk.svg?branch=master)](https://travis-ci.org/sindresorhus/chalk)\n![](http://img.shields.io/badge/unicorn-approved-ff69b4.svg)\n\n[colors.js](https://github.com/Marak/colors.js) is currently the most popular string styling module, but it has serious deficiencies like extending String.prototype which causes all kinds of [problems](https://github.com/yeoman/yo/issues/68). Although there are other ones, they either do too much or not enough.\n\n**Chalk is a clean and focused alternative.**\n\n![screenshot](https://github.com/sindresorhus/ansi-styles/raw/master/screenshot.png)\n\n\n## Why\n\n- Highly performant\n- Doesn't extend String.prototype\n- Expressive API\n- Ability to nest styles\n- Clean and focused\n- Auto-detects color support\n- Actively maintained\n- [Used by 1000+ modules](https://npmjs.org/browse/depended/chalk)\n\n\n## Install\n\n```sh\n$ npm install --save chalk\n```\n\n\n## Usage\n\nChalk comes with an easy to use composable API where you just chain and nest the styles you want.\n\n```js\nvar chalk = require('chalk');\n\n// style a string\nconsole.log(  chalk.blue('Hello world!')  );\n\n// combine styled and normal strings\nconsole.log(  chalk.blue('Hello'), 'World' + chalk.red('!')  );\n\n// compose multiple styles using the chainable API\nconsole.log(  chalk.blue.bgRed.bold('Hello world!')  );\n\n// pass in multiple arguments\nconsole.log(  chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz')  );\n\n// nest styles\nconsole.log(  chalk.red('Hello', chalk.underline.bgBlue('world') + '!')  );\n\n// nest styles of the same type even (color, underline, background)\nconsole.log(  chalk.green('I am a green line ' + chalk.blue('with a blue substring') + ' that becomes green again!')  );\n```\n\nEasily define your own themes.\n\n```js\nvar chalk = require('chalk');\nvar error = chalk.bold.red;\nconsole.log(error('Error!'));\n```\n\nTake advantage of console.log [string substitution](http://nodejs.org/docs/latest/api/console.html#console_console_log_data).\n\n```js\nvar name = 'Sindre';\nconsole.log(chalk.green('Hello %s'), name);\n//=> Hello Sindre\n```\n\n\n## API\n\n### chalk.`<style>[.<style>...](string, [string...])`\n\nExample: `chalk.red.bold.underline('Hello', 'world');`\n\nChain [styles](#styles) and call the last one as a method with a string argument. Order doesn't matter.\n\nMultiple arguments will be separated by space.\n\n### chalk.enabled\n\nColor support is automatically detected, but you can override it.\n\n### chalk.supportsColor\n\nDetect whether the terminal [supports color](https://github.com/sindresorhus/supports-color).\n\nCan be overridden by the user with the flags `--color` and `--no-color`.\n\nUsed internally and handled for you, but exposed for convenience.\n\n### chalk.styles\n\nExposes the styles as [ANSI escape codes](https://github.com/sindresorhus/ansi-styles).\n\nGenerally not useful, but you might need just the `.open` or `.close` escape code if you're mixing externally styled strings with yours.\n\n```js\nvar chalk = require('chalk');\n\nconsole.log(chalk.styles.red);\n//=> {open: '\\u001b[31m', close: '\\u001b[39m'}\n\nconsole.log(chalk.styles.red.open + 'Hello' + chalk.styles.red.close);\n```\n\n### chalk.hasColor(string)\n\nCheck whether a string [has color](https://github.com/sindresorhus/has-ansi).\n\n### chalk.stripColor(string)\n\n[Strip color](https://github.com/sindresorhus/strip-ansi) from a string.\n\nCan be useful in combination with `.supportsColor` to strip color on externally styled text when it's not supported.\n\nExample:\n\n```js\nvar chalk = require('chalk');\nvar styledString = getText();\n\nif (!chalk.supportsColor) {\n\tstyledString = chalk.stripColor(styledString);\n}\n```\n\n\n## Styles\n\n### General\n\n- `reset`\n- `bold`\n- `dim`\n- `italic` *(not widely supported)*\n- `underline`\n- `inverse`\n- `hidden`\n- `strikethrough` *(not widely supported)*\n\n### Text colors\n\n- `black`\n- `red`\n- `green`\n- `yellow`\n- `blue`\n- `magenta`\n- `cyan`\n- `white`\n- `gray`\n\n### Background colors\n\n- `bgBlack`\n- `bgRed`\n- `bgGreen`\n- `bgYellow`\n- `bgBlue`\n- `bgMagenta`\n- `bgCyan`\n- `bgWhite`\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
      "readmeFilename": "readme.md",
      "bugs": {
        "url": "https://github.com/sindresorhus/chalk/issues"
      },
      "homepage": "https://github.com/sindresorhus/chalk",
      "_id": "chalk@0.5.1",
      "_shasum": "663b3a648b68b55d04690d49167aa837858f2174",
      "_from": "chalk@",
      "_resolved": "https://registry.npmjs.org/chalk/-/chalk-0.5.1.tgz"
    },
    "path": "node_modules/chalk",
    "deps": {
      "ansi-styles": {
        "pkg": {
          "name": "ansi-styles",
          "version": "1.1.0",
          "description": "ANSI escape codes for styling strings in the terminal",
          "license": "MIT",
          "repository": {
            "type": "git",
            "url": "git://github.com/sindresorhus/ansi-styles"
          },
          "author": {
            "name": "Sindre Sorhus",
            "email": "sindresorhus@gmail.com",
            "url": "http://sindresorhus.com"
          },
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha"
          },
          "files": [
            "index.js"
          ],
          "keywords": [
            "ansi",
            "styles",
            "color",
            "colour",
            "colors",
            "terminal",
            "console",
            "cli",
            "string",
            "tty",
            "escape",
            "formatting",
            "rgb",
            "256",
            "shell",
            "xterm",
            "log",
            "logging",
            "command-line",
            "text"
          ],
          "devDependencies": {
            "mocha": "*"
          },
          "readme": "# ansi-styles [![Build Status](https://travis-ci.org/sindresorhus/ansi-styles.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-styles)\n\n> [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) for styling strings in the terminal\n\nYou probably want the higher-level [chalk](https://github.com/sindresorhus/chalk) module for styling your strings.\n\n![screenshot](screenshot.png)\n\n\n## Install\n\n```sh\n$ npm install --save ansi-styles\n```\n\n\n## Usage\n\n```js\nvar ansi = require('ansi-styles');\n\nconsole.log(ansi.green.open + 'Hello world!' + ansi.green.close);\n```\n\n\n## API\n\nEach style has an `open` and `close` property.\n\n\n## Styles\n\n### General\n\n- `reset`\n- `bold`\n- `dim`\n- `italic` *(not widely supported)*\n- `underline`\n- `inverse`\n- `hidden`\n- `strikethrough` *(not widely supported)*\n\n### Text colors\n\n- `black`\n- `red`\n- `green`\n- `yellow`\n- `blue`\n- `magenta`\n- `cyan`\n- `white`\n- `gray`\n\n### Background colors\n\n- `bgBlack`\n- `bgRed`\n- `bgGreen`\n- `bgYellow`\n- `bgBlue`\n- `bgMagenta`\n- `bgCyan`\n- `bgWhite`\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
          "readmeFilename": "readme.md",
          "bugs": {
            "url": "https://github.com/sindresorhus/ansi-styles/issues"
          },
          "homepage": "https://github.com/sindresorhus/ansi-styles",
          "_id": "ansi-styles@1.1.0",
          "_shasum": "eaecbf66cd706882760b2f4691582b8f55d7a7de",
          "_from": "ansi-styles@^1.1.0",
          "_resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.1.0.tgz"
        },
        "path": "node_modules/chalk/node_modules/ansi-styles",
        "deps": {}
      },
      "escape-string-regexp": {
        "pkg": {
          "name": "escape-string-regexp",
          "version": "1.0.2",
          "description": "Escape RegExp special characters",
          "license": "MIT",
          "repository": {
            "type": "git",
            "url": "git://github.com/sindresorhus/escape-string-regexp"
          },
          "author": {
            "name": "Sindre Sorhus",
            "email": "sindresorhus@gmail.com",
            "url": "http://sindresorhus.com"
          },
          "engines": {
            "node": ">=0.8.0"
          },
          "scripts": {
            "test": "mocha"
          },
          "files": [
            "index.js"
          ],
          "keywords": [
            "regex",
            "regexp",
            "re",
            "regular",
            "expression",
            "escape",
            "string",
            "str",
            "special",
            "characters"
          ],
          "devDependencies": {
            "mocha": "*"
          },
          "readme": "# escape-string-regexp [![Build Status](https://travis-ci.org/sindresorhus/escape-string-regexp.svg?branch=master)](https://travis-ci.org/sindresorhus/escape-string-regexp)\n\n> Escape RegExp special characters\n\n\n## Install\n\n```sh\n$ npm install --save escape-string-regexp\n```\n\n\n## Usage\n\n```js\nvar escapeStringRegexp = require('escape-string-regexp');\n\nvar escapedString = escapeStringRegexp('how much $ for a unicorn?');\n//=> how much \\$ for a unicorn\\?\n\nnew RegExp(escapedString);\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
          "readmeFilename": "readme.md",
          "bugs": {
            "url": "https://github.com/sindresorhus/escape-string-regexp/issues"
          },
          "homepage": "https://github.com/sindresorhus/escape-string-regexp",
          "_id": "escape-string-regexp@1.0.2",
          "_shasum": "4dbc2fe674e71949caf3fb2695ce7f2dc1d9a8d1",
          "_from": "escape-string-regexp@^1.0.0",
          "_resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.2.tgz"
        },
        "path": "node_modules/chalk/node_modules/escape-string-regexp",
        "deps": {}
      },
      "has-ansi": {
        "pkg": {
          "name": "has-ansi",
          "version": "0.1.0",
          "description": "Check if a string has ANSI escape codes",
          "license": "MIT",
          "repository": {
            "type": "git",
            "url": "git://github.com/sindresorhus/has-ansi"
          },
          "bin": {
            "has-ansi": "cli.js"
          },
          "author": {
            "name": "Sindre Sorhus",
            "email": "sindresorhus@gmail.com",
            "url": "http://sindresorhus.com"
          },
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha"
          },
          "files": [
            "index.js",
            "cli.js"
          ],
          "keywords": [
            "cli",
            "bin",
            "ansi",
            "styles",
            "color",
            "colour",
            "colors",
            "terminal",
            "console",
            "string",
            "tty",
            "escape",
            "shell",
            "xterm",
            "command-line",
            "text",
            "regex",
            "regexp",
            "re",
            "match",
            "test",
            "find",
            "pattern",
            "has"
          ],
          "dependencies": {
            "ansi-regex": "^0.2.0"
          },
          "devDependencies": {
            "mocha": "*"
          },
          "readme": "# has-ansi [![Build Status](https://travis-ci.org/sindresorhus/has-ansi.svg?branch=master)](https://travis-ci.org/sindresorhus/has-ansi)\n\n> Check if a string has [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code)\n\n\n## Install\n\n```sh\n$ npm install --save has-ansi\n```\n\n\n## Usage\n\n```js\nvar hasAnsi = require('has-ansi');\n\nhasAnsi('\\u001b[4mcake\\u001b[0m');\n//=> true\n\nhasAnsi('cake');\n//=> false\n```\n\n\n## CLI\n\n```sh\n$ npm install --global has-ansi\n```\n\n```\n$ has-ansi --help\n\nUsage\n  $ has-ansi <string>\n  $ echo <string> | has-ansi\n\nExits with code 0 if input has ANSI escape codes and 1 if not\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
          "readmeFilename": "readme.md",
          "bugs": {
            "url": "https://github.com/sindresorhus/has-ansi/issues"
          },
          "homepage": "https://github.com/sindresorhus/has-ansi",
          "_id": "has-ansi@0.1.0",
          "_shasum": "84f265aae8c0e6a88a12d7022894b7568894c62e",
          "_from": "has-ansi@^0.1.0",
          "_resolved": "https://registry.npmjs.org/has-ansi/-/has-ansi-0.1.0.tgz"
        },
        "path": "node_modules/chalk/node_modules/has-ansi",
        "deps": {
          "ansi-regex": {
            "pkg": {
              "name": "ansi-regex",
              "version": "0.2.1",
              "description": "Regular expression for matching ANSI escape codes",
              "license": "MIT",
              "repository": {
                "type": "git",
                "url": "git://github.com/sindresorhus/ansi-regex"
              },
              "author": {
                "name": "Sindre Sorhus",
                "email": "sindresorhus@gmail.com",
                "url": "http://sindresorhus.com"
              },
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha"
              },
              "files": [
                "index.js"
              ],
              "keywords": [
                "ansi",
                "styles",
                "color",
                "colour",
                "colors",
                "terminal",
                "console",
                "cli",
                "string",
                "tty",
                "escape",
                "formatting",
                "rgb",
                "256",
                "shell",
                "xterm",
                "command-line",
                "text",
                "regex",
                "regexp",
                "re",
                "match",
                "test",
                "find",
                "pattern"
              ],
              "devDependencies": {
                "mocha": "*"
              },
              "readme": "# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex)\n\n> Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code)\n\n\n## Install\n\n```sh\n$ npm install --save ansi-regex\n```\n\n\n## Usage\n\n```js\nvar ansiRegex = require('ansi-regex');\n\nansiRegex().test('\\u001b[4mcake\\u001b[0m');\n//=> true\n\nansiRegex().test('cake');\n//=> false\n\n'\\u001b[4mcake\\u001b[0m'.match(ansiRegex());\n//=> ['\\u001b[4m', '\\u001b[0m']\n```\n\n*It's a function so you can create multiple instances. Regexes with the global flag will have the `.lastIndex` property changed for each call to methods on the instance. Therefore reusing the instance with multiple calls will not work as expected for `.test()`.*\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
              "readmeFilename": "readme.md",
              "bugs": {
                "url": "https://github.com/sindresorhus/ansi-regex/issues"
              },
              "homepage": "https://github.com/sindresorhus/ansi-regex",
              "_id": "ansi-regex@0.2.1",
              "_shasum": "0d8e946967a3d8143f93e24e298525fc1b2235f9",
              "_from": "ansi-regex@^0.2.0",
              "_resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-0.2.1.tgz"
            },
            "path": "node_modules/chalk/node_modules/has-ansi/node_modules/ansi-regex",
            "deps": {}
          }
        }
      },
      "strip-ansi": {
        "pkg": {
          "name": "strip-ansi",
          "version": "0.3.0",
          "description": "Strip ANSI escape codes",
          "license": "MIT",
          "bin": {
            "strip-ansi": "cli.js"
          },
          "repository": {
            "type": "git",
            "url": "git://github.com/sindresorhus/strip-ansi"
          },
          "author": {
            "name": "Sindre Sorhus",
            "email": "sindresorhus@gmail.com",
            "url": "http://sindresorhus.com"
          },
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha"
          },
          "files": [
            "index.js",
            "cli.js"
          ],
          "keywords": [
            "strip",
            "trim",
            "remove",
            "ansi",
            "styles",
            "color",
            "colour",
            "colors",
            "terminal",
            "console",
            "cli",
            "string",
            "tty",
            "escape",
            "formatting",
            "rgb",
            "256",
            "shell",
            "xterm",
            "log",
            "logging",
            "command-line",
            "text"
          ],
          "dependencies": {
            "ansi-regex": "^0.2.1"
          },
          "devDependencies": {
            "mocha": "*"
          },
          "readme": "# strip-ansi [![Build Status](https://travis-ci.org/sindresorhus/strip-ansi.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-ansi)\n\n> Strip [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code)\n\n\n## Install\n\n```sh\n$ npm install --save strip-ansi\n```\n\n\n## Usage\n\n```js\nvar stripAnsi = require('strip-ansi');\n\nstripAnsi('\\x1b[4mcake\\x1b[0m');\n//=> 'cake'\n```\n\n\n## CLI\n\n```sh\n$ npm install --global strip-ansi\n```\n\n```sh\n$ strip-ansi --help\n\nUsage\n  $ strip-ansi <input-file> > <output-file>\n  $ cat <input-file> | strip-ansi > <output-file>\n\nExample\n  $ strip-ansi unicorn.txt > unicorn-stripped.txt\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
          "readmeFilename": "readme.md",
          "bugs": {
            "url": "https://github.com/sindresorhus/strip-ansi/issues"
          },
          "homepage": "https://github.com/sindresorhus/strip-ansi",
          "_id": "strip-ansi@0.3.0",
          "_shasum": "25f48ea22ca79187f3174a4db8759347bb126220",
          "_from": "strip-ansi@^0.3.0",
          "_resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.3.0.tgz"
        },
        "path": "node_modules/chalk/node_modules/strip-ansi",
        "deps": {
          "ansi-regex": {
            "pkg": {
              "name": "ansi-regex",
              "version": "0.2.1",
              "description": "Regular expression for matching ANSI escape codes",
              "license": "MIT",
              "repository": {
                "type": "git",
                "url": "git://github.com/sindresorhus/ansi-regex"
              },
              "author": {
                "name": "Sindre Sorhus",
                "email": "sindresorhus@gmail.com",
                "url": "http://sindresorhus.com"
              },
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha"
              },
              "files": [
                "index.js"
              ],
              "keywords": [
                "ansi",
                "styles",
                "color",
                "colour",
                "colors",
                "terminal",
                "console",
                "cli",
                "string",
                "tty",
                "escape",
                "formatting",
                "rgb",
                "256",
                "shell",
                "xterm",
                "command-line",
                "text",
                "regex",
                "regexp",
                "re",
                "match",
                "test",
                "find",
                "pattern"
              ],
              "devDependencies": {
                "mocha": "*"
              },
              "readme": "# ansi-regex [![Build Status](https://travis-ci.org/sindresorhus/ansi-regex.svg?branch=master)](https://travis-ci.org/sindresorhus/ansi-regex)\n\n> Regular expression for matching [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code)\n\n\n## Install\n\n```sh\n$ npm install --save ansi-regex\n```\n\n\n## Usage\n\n```js\nvar ansiRegex = require('ansi-regex');\n\nansiRegex().test('\\u001b[4mcake\\u001b[0m');\n//=> true\n\nansiRegex().test('cake');\n//=> false\n\n'\\u001b[4mcake\\u001b[0m'.match(ansiRegex());\n//=> ['\\u001b[4m', '\\u001b[0m']\n```\n\n*It's a function so you can create multiple instances. Regexes with the global flag will have the `.lastIndex` property changed for each call to methods on the instance. Therefore reusing the instance with multiple calls will not work as expected for `.test()`.*\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
              "readmeFilename": "readme.md",
              "bugs": {
                "url": "https://github.com/sindresorhus/ansi-regex/issues"
              },
              "homepage": "https://github.com/sindresorhus/ansi-regex",
              "_id": "ansi-regex@0.2.1",
              "_shasum": "0d8e946967a3d8143f93e24e298525fc1b2235f9",
              "_from": "ansi-regex@^0.2.1",
              "_resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-0.2.1.tgz"
            },
            "path": "node_modules/chalk/node_modules/strip-ansi/node_modules/ansi-regex",
            "deps": {}
          }
        }
      },
      "supports-color": {
        "pkg": {
          "name": "supports-color",
          "version": "0.2.0",
          "description": "Detect whether a terminal supports color",
          "license": "MIT",
          "repository": {
            "type": "git",
            "url": "git://github.com/sindresorhus/supports-color"
          },
          "bin": {
            "supports-color": "cli.js"
          },
          "author": {
            "name": "Sindre Sorhus",
            "email": "sindresorhus@gmail.com",
            "url": "http://sindresorhus.com"
          },
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha"
          },
          "files": [
            "index.js",
            "cli.js"
          ],
          "keywords": [
            "cli",
            "bin",
            "color",
            "colour",
            "colors",
            "terminal",
            "console",
            "cli",
            "ansi",
            "styles",
            "tty",
            "rgb",
            "256",
            "shell",
            "xterm",
            "command-line",
            "support",
            "supports",
            "capability",
            "detect"
          ],
          "devDependencies": {
            "mocha": "*"
          },
          "readme": "# supports-color [![Build Status](https://travis-ci.org/sindresorhus/supports-color.svg?branch=master)](https://travis-ci.org/sindresorhus/supports-color)\n\n> Detect whether a terminal supports color\n\n\n## Install\n\n```sh\n$ npm install --save supports-color\n```\n\n\n## Usage\n\n```js\nvar supportsColor = require('supports-color');\n\nif (supportsColor) {\n\tconsole.log('Terminal supports color');\n}\n```\n\nIt obeys the `--color` and `--no-color` CLI flags.\n\n\n## CLI\n\n```sh\n$ npm install --global supports-color\n```\n\n```sh\n$ supports-color --help\n\nUsage\n  $ supports-color\n\n# Exits with code 0 if color is supported and 1 if not\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
          "readmeFilename": "readme.md",
          "bugs": {
            "url": "https://github.com/sindresorhus/supports-color/issues"
          },
          "homepage": "https://github.com/sindresorhus/supports-color",
          "_id": "supports-color@0.2.0",
          "_shasum": "d92de2694eb3f67323973d7ae3d8b55b4c22190a",
          "_from": "supports-color@^0.2.0",
          "_resolved": "https://registry.npmjs.org/supports-color/-/supports-color-0.2.0.tgz"
        },
        "path": "node_modules/chalk/node_modules/supports-color",
        "deps": {}
      }
    }
  },
  "fs-utils": {
    "pkg": {
      "name": "fs-utils",
      "version": "0.5.0",
      "description": "fs extras and utilities to extend the node.js file system module. Used in Assemble and many other projects.",
      "repository": {
        "type": "git",
        "url": "https://github.com/assemble/fs-utils.git"
      },
      "homepage": "https://github.com/assemble/fs-utils",
      "author": {
        "name": "Jon Schlinkert",
        "url": "https://github.com/assemble"
      },
      "bugs": {
        "url": "https://github.com/assemble/fs-utils/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "https://github.com/assemble/fs-utils/blob/master/LICENSE-MIT"
        }
      ],
      "main": "index.js",
      "scripts": {
        "test": "mocha -R spec"
      },
      "engines": {
        "node": ">= 0.8.0"
      },
      "dependencies": {
        "async": "^0.9.0",
        "delete": "^0.1.5",
        "extend-shallow": "^0.1.0",
        "globby": "^0.1.1",
        "graceful-fs": "^3.0.2",
        "is-absolute": "^0.1.5",
        "js-yaml": "^3.2.2",
        "kind-of": "^0.1.0",
        "relative": "^0.1.6"
      },
      "devDependencies": {
        "mocha": "*",
        "should": "^4.0.4",
        "verb": ">= 0.2.6",
        "verb-tag-jscomments": ">= 0.2.0"
      },
      "keywords": [
        "file system",
        "file",
        "read",
        "readFile",
        "readFileSync",
        "fs",
        "node",
        "node.js",
        "path",
        "utils"
      ],
      "readme": "# fs-utils [![NPM version](https://badge.fury.io/js/fs-utils.svg)](http://badge.fury.io/js/fs-utils)\n\n\n> fs extras and utilities to extend the node.js file system module. Used in Assemble and many other projects.\n\n## Install\n#### Install with [npm](npmjs.org):\n\n```bash\nnpm i fs-utils --save-dev\n```\n\n## Run tests\n\n```bash\nnpm test\n```\n\n## Usage\n\n```js\nvar fs = require('fs-utils');\n```\n\n## API\n### [.stripcr](index.js#L31)\n\n* `str` **{String}**    \n* `returns`: {String}  \n\nStrip carriage returns from a string.\n\n### [.stripBOM](index.js#L45)\n\nStrip byte order marks from a string.\n\n* `str` **{String}**    \n* `returns`: {String}  \n\nSee [BOM](http://en.wikipedia.org/wiki/Byte_order_mark)\n\n### [.forwardSlash](index.js#L57)\n\n* `str` **{String}**    \n* `returns`: {String}  \n\nNormalize all slashes to forward slashes.\n\n### [.isEmpty](index.js#L98)\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nReturn `true` if the file exists and is empty.\n\n### [.isDir](index.js#L114)\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nReturn `true` if the filepath is a directory.\n\n### [.isLink](index.js#L145)\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nTrue if the filepath is a symbolic link.\n\n### [.glob](index.js#L159)\n\n* `patterns` **{String|Array}**    \n* `returns`: {options}  \n\nGlob files using [globby]. Or glob files synchronously\nwith `glob.sync`.\n\n### [.readFileSync](index.js#L170)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nRead a file synchronously. Also strips any byte order\nmarks.\n\n### [readFile](index.js#L190)\n\n* `filepath` **{String}**    \n* `options` **{Object}**    \n* `normalize` **{Boolean}**: Strip carriage returns and BOM.    \n* `encoding` **{String}**: Default is `utf8`    \n* `callback` **{Function}**    \n\nRead a file asynchronously.\n\n### [.readJSONSync](index.js#L221)\n\n* `filepath` **{String}**    \n* `returns`: {Object}  \n\nRead a file synchronously and parse contents as JSON.\nmarks.\n\n### [.readJSON](index.js#L234)\n\n* `filepath` **{String}**    \n* `callback` **{Function}**    \n* `returns`: {Object}  \n\nRead JSON file asynchronously and parse content as JSON\n\n### [.readYAMLSync](index.js#L252)\n\n* `filepath` **{String}**    \n* `returns`: {Object}  \n\nRead a YAML file synchronously and parse its content as JSON\n\n### [.readYAML](index.js#L264)\n\n* `filepath` **{String}**    \n* `returns`: {Object}  \n\nRead a YAML file synchronously and parse its content as JSON\n\n### [.readDataSync](index.js#L296)\n\n* `filepath` **{String}**    \n* `options` **{String}**    \n* `returns`: {String}  \n\nRead JSON or YAML. Determins the reader automatically\nbased on file extension.\n\n### [.readData](index.js#L327)\n\n* `filepath` **{String}**    \n* `options` **{String}**    \n* `returns`: {String}  \n\nRead JSON or YAML async. Determins the reader automatically\nbased on file extension.\n\n### [.writeFile](index.js#L388)\n\n\nWrite\n\n### [.writeFileSync](index.js#L415)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nSynchronously write files to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeJSONSync](index.js#L435)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nSynchronously write JSON to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeJSON](index.js#L451)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nAsynchronously write files to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeYAMLSync](index.js#L472)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nSynchronously write YAML to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeYAML](index.js#L488)\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\nAynchronously write YAML to disk, creating any\nintermediary directories if they don't exist.\n\n### [.writeDataSync](index.js#L513)\n\nSynchronously write JSON or YAML to disk, creating any intermediary directories if they don't exist. Data type is determined by the `dest` file extension.\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\n```js\nwriteDataSync('foo.yml', {foo: \"bar\"});\n```\n\n### [.writeData](index.js#L549)\n\nAsynchronously write JSON or YAML to disk, creating any intermediary directories if they don't exist. Data type is determined by the `dest` file extension.\n\n* `dest` **{String}**    \n* `str` **{String}**    \n* `options` **{Options}**    \n\n```js\nwriteDataSync('foo.yml', {foo: \"bar\"});\n```\n\n### [.copyFileSync](index.js#L582)\n\n* `src` **{String}**    \n* `dest` **{String}**    \n\nCopy files synchronously;\n\n### [.rmdir](index.js#L595)\n\n* `dir` **{String}**    \n* **{Function}**: `cb    \n* `returns`: {Function}  \n\nAsynchronously remove dirs and child dirs that exist.\n\n### [.ext](index.js#L702)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nReturn the file extension.\n\n### [.dirname](index.js#L714)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nDirectory path excluding filename.\n\n### [.last](index.js#L740)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nThe last `n` segments of a filepath. If a number\nisn't passed for `n`, the last segment is returned.\n\n### [.first](index.js#L755)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nThe first `n` segments of a filepath. If a number\nisn't passed for `n`, the first segment is returned.\n\n### [.lastChar](index.js#L774)\n\nReturns the last character in `filepath`\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\n```\nlastChar('foo/bar/baz/');\n//=> '/'\n```\n\n### [.addSlash](index.js#L801)\n\nAdd a trailing slash to the filepath.\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nNote, this does _not_ consult the file system\nto check if the filepath is file or a directory.\n\n### [.normalizePath](index.js#L816)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nNormalize a filepath and remove trailing slashes.\n\n### [.relative](index.js#L842)\n\n* `filepath` **{String}**    \n* `returns`: {String}  \n\nResolve the relative path from `a` to `b.\n\n### [.isAbsolute](index.js#L854)\n\n* **{[type]}**: filepath    \n* `returns`: {Boolean}  \n\nReturn `true` if the path is absolute.\n\n### [.equivalent](index.js#L868)\n\n* `filepath` **{String}**    \n* `a` **{String}**    \n* `b` **{String}**    \n* `returns`: {Boolean}  \n\nReturn `true` if path `a` is the same as path `b.\n\n### [.doesPathContain](index.js#L883)\n\nTrue if descendant path(s) contained within ancestor path. Note: does not test if paths actually exist.\n\n* `ancestor` **{String}**: The starting path.    \n* `returns`: {Boolean}  \n\nSourced from [Grunt].\n\n### [.isPathCwd](index.js#L912)\n\nTrue if a filepath is the CWD.\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nSourced from [Grunt].\n\n### [.isPathInCwd](index.js#L929)\n\n* `filepath` **{String}**    \n* `returns`: {Boolean}  \n\nTrue if a filepath is contained within the CWD.\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/assemble](https://github.com/assemble)\n+ [twitter/assemble](http://twitter.com/assemble) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 06, 2014._\n\n[globby]: //github.com/sindresorhus/globby",
      "readmeFilename": "README.md",
      "_id": "fs-utils@0.5.0",
      "_shasum": "171bb985501ec9bcb662bf62c9916c9aadeace24",
      "_from": "fs-utils@"
    },
    "path": "node_modules/fs-utils",
    "deps": {
      "async": {
        "pkg": {
          "name": "async",
          "description": "Higher-order functions and common patterns for asynchronous code",
          "main": "./lib/async",
          "author": {
            "name": "Caolan McMahon"
          },
          "version": "0.9.0",
          "repository": {
            "type": "git",
            "url": "https://github.com/caolan/async.git"
          },
          "bugs": {
            "url": "https://github.com/caolan/async/issues"
          },
          "licenses": [
            {
              "type": "MIT",
              "url": "https://github.com/caolan/async/raw/master/LICENSE"
            }
          ],
          "devDependencies": {
            "nodeunit": ">0.0.0",
            "uglify-js": "1.2.x",
            "nodelint": ">0.0.0"
          },
          "jam": {
            "main": "lib/async.js",
            "include": [
              "lib/async.js",
              "README.md",
              "LICENSE"
            ]
          },
          "scripts": {
            "test": "nodeunit test/test-async.js"
          },
          "readme": "# Async.js\n\n[![Build Status via Travis CI](https://travis-ci.org/caolan/async.svg?branch=master)](https://travis-ci.org/caolan/async)\n\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [Node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (`map`, `reduce`, `filter`, `each`…) as well as some common patterns\nfor asynchronous control flow (`parallel`, `series`, `waterfall`…). All these\nfunctions assume you follow the Node.js convention of providing a single\ncallback as the last argument of your `async` function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about `bind`, not about `async`. If you are wondering how to\nmake `async` execute your iterators in a given context, or are confused as to why\na method of another library isn't working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // 'home' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (`npm`):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it's been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. \n\nUsage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [`each`](#each)\n* [`eachSeries`](#eachSeries)\n* [`eachLimit`](#eachLimit)\n* [`map`](#map)\n* [`mapSeries`](#mapSeries)\n* [`mapLimit`](#mapLimit)\n* [`filter`](#filter)\n* [`filterSeries`](#filterSeries)\n* [`reject`](#reject)\n* [`rejectSeries`](#rejectSeries)\n* [`reduce`](#reduce)\n* [`reduceRight`](#reduceRight)\n* [`detect`](#detect)\n* [`detectSeries`](#detectSeries)\n* [`sortBy`](#sortBy)\n* [`some`](#some)\n* [`every`](#every)\n* [`concat`](#concat)\n* [`concatSeries`](#concatSeries)\n\n### Control Flow\n\n* [`series`](#seriestasks-callback)\n* [`parallel`](#parallel)\n* [`parallelLimit`](#parallellimittasks-limit-callback)\n* [`whilst`](#whilst)\n* [`doWhilst`](#doWhilst)\n* [`until`](#until)\n* [`doUntil`](#doUntil)\n* [`forever`](#forever)\n* [`waterfall`](#waterfall)\n* [`compose`](#compose)\n* [`seq`](#seq)\n* [`applyEach`](#applyEach)\n* [`applyEachSeries`](#applyEachSeries)\n* [`queue`](#queue)\n* [`priorityQueue`](#priorityQueue)\n* [`cargo`](#cargo)\n* [`auto`](#auto)\n* [`retry`](#retry)\n* [`iterator`](#iterator)\n* [`apply`](#apply)\n* [`nextTick`](#nextTick)\n* [`times`](#times)\n* [`timesSeries`](#timesSeries)\n\n### Utils\n\n* [`memoize`](#memoize)\n* [`unmemoize`](#unmemoize)\n* [`log`](#log)\n* [`dir`](#dir)\n* [`noConflict`](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n<a name=\"each\" />\n### each(arr, iterator, callback)\n\nApplies the function `iterator` to each item in `arr`, in parallel.\nThe `iterator` is called with an item from the list, and a callback for when it\nhas finished. If the `iterator` passes an error to its `callback`, the main\n`callback` (for the `each` function) is immediately called with the error.\n\nNote, that since this function applies `iterator` to each item in parallel,\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `iterator(item, callback)` - A function to apply to each item in `arr`.\n  The iterator is passed a `callback(err)` which must be called once it has \n  completed. If no error has occured, the `callback` should be run without \n  arguments or with an explicit `null` argument.\n* `callback(err)` - A callback which is called when all `iterator` functions\n  have finished, or an error occurs.\n\n__Examples__\n\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n```js\n// assuming openFiles is an array of file names \n\nasync.each(openFiles, function( file, callback) {\n  \n  // Perform operation on file here.\n  console.log('Processing file ' + file);\n  \n  if( file.length > 32 ) {\n    console.log('This file name is too long');\n    callback('File name too long');\n  } else {\n    // Do work to process file here\n    console.log('File processed');\n    callback();\n  }\n}, function(err){\n    // if any of the file processing produced an error, err would equal that error\n    if( err ) {\n      // One of the iterations produced an error.\n      // All processing will now stop.\n      console.log('A file failed to process');\n    } else {\n      console.log('All files have been processed successfully');\n    }\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n<a name=\"eachSeries\" />\n### eachSeries(arr, iterator, callback)\n\nThe same as [`each`](#each), only `iterator` is applied to each item in `arr` in\nseries. The next `iterator` is only called once the current one has completed. \nThis means the `iterator` functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n<a name=\"eachLimit\" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as [`each`](#each), only no more than `limit` `iterator`s will be simultaneously \nrunning at any time.\n\nNote that the items in `arr` are not processed in batches, so there is no guarantee that \nthe first `limit` `iterator` functions will complete before any others are started.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `limit` - The maximum number of `iterator`s to run at any time.\n* `iterator(item, callback)` - A function to apply to each item in `arr`.\n  The iterator is passed a `callback(err)` which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit `null` argument.\n* `callback(err)` - A callback which is called when all `iterator` functions\n  have finished, or an error occurs.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in `arr` through\nthe `iterator` function. The `iterator` is called with an item from `arr` and a\ncallback for when it has finished processing. Each of these callback takes 2 arguments: \nan `error`, and the transformed item from `arr`. If `iterator` passes an error to this \ncallback, the main `callback` (for the `map` function) is immediately called with the error.\n\nNote, that since this function applies the `iterator` to each item in parallel,\nthere is no guarantee that the `iterator` functions will complete in order. \nHowever, the results array will be in the same order as the original `arr`.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `iterator(item, callback)` - A function to apply to each item in `arr`.\n  The iterator is passed a `callback(err, transformed)` which must be called once \n  it has completed with an error (which can be `null`) and a transformed item.\n* `callback(err, results)` - A callback which is called when all `iterator`\n  functions have finished, or an error occurs. Results is an array of the\n  transformed items from the `arr`.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as [`map`](#map), only the `iterator` is applied to each item in `arr` in\nseries. The next `iterator` is only called once the current one has completed. \nThe results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as [`map`](#map), only no more than `limit` `iterator`s will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that \nthe first `limit` `iterator` functions will complete before any others are started.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `limit` - The maximum number of `iterator`s to run at any time.\n* `iterator(item, callback)` - A function to apply to each item in `arr`.\n  The iterator is passed a `callback(err, transformed)` which must be called once \n  it has completed with an error (which can be `null`) and a transformed item.\n* `callback(err, results)` - A callback which is called when all `iterator`\n  calls have finished, or an error occurs. The result is an array of the\n  transformed items from the original `arr`.\n\n__Example__\n\n```js\nasync.mapLimit(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"select\" />\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ `select`\n\nReturns a new array of all the values in `arr` which pass an async truth test.\n_The callback for each `iterator` call only accepts a single argument of `true` or\n`false`; it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like `fs.exists`. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `iterator(item, callback)` - A truth test to apply to each item in `arr`.\n  The `iterator` is passed a `callback(truthValue)`, which must be called with a \n  boolean argument once it has completed.\n* `callback(results)` - A callback which is called after all the `iterator`\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"selectSeries\" />\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__Alias:__ `selectSeries`\n\nThe same as [`filter`](#filter) only the `iterator` is applied to each item in `arr` in\nseries. The next `iterator` is only called once the current one has completed. \nThe results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of [`filter`](#filter). Removes values that pass an `async` truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as [`reject`](#reject), only the `iterator` is applied to each item in `arr`\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__Aliases:__ `inject`, `foldl`\n\nReduces `arr` into a single value using an async `iterator` to return\neach successive step. `memo` is the initial state of the reduction. \nThis function only operates in series. \n\nFor performance reasons, it may make sense to split a call to this function into \na parallel map, and then use the normal `Array.prototype.reduce` on the results. \nThis function is for situations where each step in the reduction needs to be async; \nif you can get the data before reducing it, then it's probably a good idea to do so.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `memo` - The initial state of the reduction.\n* `iterator(memo, item, callback)` - A function applied to each item in the\n  array to produce the next step in the reduction. The `iterator` is passed a\n  `callback(err, reduction)` which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main `callback` is \n  immediately called with the error.\n* `callback(err, result)` - A callback which is called after all the `iterator`\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ `foldr`\n\nSame as [`reduce`](#reduce), only operates on `arr` in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in `arr` that passes an async truth test. The\n`iterator` is applied in parallel, meaning the first iterator to return `true` will\nfire the detect `callback` with that result. That means the result might not be\nthe first item in the original `arr` (in terms of order) that passes the test.\n\nIf order within the original `arr` is important, then look at [`detectSeries`](#detectSeries).\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `iterator(item, callback)` - A truth test to apply to each item in `arr`.\n  The iterator is passed a `callback(truthValue)` which must be called with a \n  boolean argument once it has completed.\n* `callback(result)` - A callback which is called as soon as any iterator returns\n  `true`, or after all the `iterator` functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value `undefined` if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as [`detect`](#detect), only the `iterator` is applied to each item in `arr`\nin series. This means the result is always the first in the original `arr` (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each `arr` value through an async `iterator`.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `iterator(item, callback)` - A function to apply to each item in `arr`.\n  The iterator is passed a `callback(err, sortValue)` which must be called once it\n  has completed with an error (which can be `null`) and a value to use as the sort\n  criteria.\n* `callback(err, results)` - A callback which is called after all the `iterator`\n  functions have finished, or an error occurs. Results is the items from\n  the original `arr` sorted by the values returned by the `iterator` calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n__Sort Order__\n\nBy modifying the callback parameter the sorting order can be influenced:\n\n```js\n//ascending order\nasync.sortBy([1,9,3,5], function(x, callback){\n    callback(err, x);\n}, function(err,result){\n    //result callback\n} );\n\n//descending order\nasync.sortBy([1,9,3,5], function(x, callback){\n    callback(err, x*-1);    //<- x*-1 instead of x, turns the order around\n}, function(err,result){\n    //result callback\n} );\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ `any`\n\nReturns `true` if at least one element in the `arr` satisfies an async test.\n_The callback for each iterator call only accepts a single argument of `true` or\n`false`; it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like `fs.exists`. Once any iterator\ncall returns `true`, the main `callback` is immediately called.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `iterator(item, callback)` - A truth test to apply to each item in the array\n  in parallel. The iterator is passed a callback(truthValue) which must be \n  called with a boolean argument once it has completed.\n* `callback(result)` - A callback which is called as soon as any iterator returns\n  `true`, or after all the iterator functions have finished. Result will be\n  either `true` or `false` depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ `all`\n\nReturns `true` if every element in `arr` satisfies an async test.\n_The callback for each `iterator` call only accepts a single argument of `true` or\n`false`; it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like `fs.exists`.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `iterator(item, callback)` - A truth test to apply to each item in the array\n  in parallel. The iterator is passed a callback(truthValue) which must be \n  called with a  boolean argument once it has completed.\n* `callback(result)` - A callback which is called after all the `iterator`\n  functions have finished. Result will be either `true` or `false` depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies `iterator` to each item in `arr`, concatenating the results. Returns the\nconcatenated list. The `iterator`s are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of `arr` passed to the `iterator` function.\n\n__Arguments__\n\n* `arr` - An array to iterate over.\n* `iterator(item, callback)` - A function to apply to each item in `arr`.\n  The iterator is passed a `callback(err, results)` which must be called once it \n  has completed with an error (which can be `null`) and an array of results.\n* `callback(err, results)` - A callback which is called after all the `iterator`\n  functions have finished, or an error occurs. Results is an array containing\n  the concatenated results of the `iterator` function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as [`concat`](#concat), but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun the functions in the `tasks` array in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run, and `callback` is immediately called with the value of the error. \nOtherwise, `callback` receives an array of results when `tasks` have completed.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function, and the results will be passed to the final `callback` as an object\ninstead of an array. This can be a more readable way of handling results from\n[`series`](#series).\n\n**Note** that while many implementations preserve the order of object properties, the\n[ECMAScript Language Specifcation](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6) \nexplicitly states that\n\n> The mechanics and order of enumerating the properties is not specified.\n\nSo if you rely on the order in which your series of functions are executed, and want\nthis to work on all platforms, consider using an array. \n\n__Arguments__\n\n* `tasks` - An array or object containing functions to run, each function is passed\n  a `callback(err, result)` it must call on completion with an error `err` (which can\n  be `null`) and an optional `result` value.\n* `callback(err, results)` - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the `task` callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun the `tasks` array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main `callback` is immediately called with the value of the error.\nOnce the `tasks` have completed, the results are passed to the final `callback` as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final `callback` as an object\ninstead of an array. This can be a more readable way of handling results from\n[`parallel`](#parallel).\n\n\n__Arguments__\n\n* `tasks` - An array or object containing functions to run. Each function is passed \n  a `callback(err, result)` which it must call on completion with an error `err` \n  (which can be `null`) and an optional `result` value.\n* `callback(err, results)` - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallelLimit\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as [`parallel`](#parallel), only `tasks` are executed in parallel \nwith a maximum of `limit` tasks executing at any time.\n\nNote that the `tasks` are not executed in batches, so there is no guarantee that \nthe first `limit` tasks will complete before any others are started.\n\n__Arguments__\n\n* `tasks` - An array or object containing functions to run, each function is passed \n  a `callback(err, result)` it must call on completion with an error `err` (which can\n  be `null`) and an optional `result` value.\n* `limit` - The maximum number of `tasks` to run at any time.\n* `callback(err, results)` - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the `task` callbacks.\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call `fn`, while `test` returns `true`. Calls `callback` when stopped,\nor an error occurs.\n\n__Arguments__\n\n* `test()` - synchronous truth test to perform before each execution of `fn`.\n* `fn(callback)` - A function which is called each time `test` passes. The function is\n  passed a `callback(err)`, which must be called once it has completed with an \n  optional `err` argument.\n* `callback(err)` - A callback which is called after the test fails and repeated\n  execution of `fn` has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post-check version of [`whilst`](#whilst). To reflect the difference in \nthe order of operations, the arguments `test` and `fn` are switched. \n\n`doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call `fn` until `test` returns `true`. Calls `callback` when stopped,\nor an error occurs.\n\nThe inverse of [`whilst`](#whilst).\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike [`doWhilst`](#doWhilst), except the `test` is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name=\"forever\" />\n### forever(fn, errback)\n\nCalls the asynchronous function `fn` with a callback parameter that allows it to\ncall itself again, in series, indefinitely.\n\nIf an error is passed to the callback then `errback` is called with the\nerror, and execution stops, otherwise it will never be called.\n\n```js\nasync.forever(\n    function(next) {\n        // next is suitable for passing to things that need a callback(err [, whatever]);\n        // it will result in this function being called again.\n    },\n    function(err) {\n        // if next is called with a value in its first parameter, it will appear\n        // in here as 'err', and execution will stop.\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns the `tasks` array of functions in series, each passing their results to the next in\nthe array. However, if any of the `tasks` pass an error to their own callback, the\nnext function is not executed, and the main `callback` is immediately called with\nthe error.\n\n__Arguments__\n\n* `tasks` - An array of functions to run, each function is passed a \n  `callback(err, result1, result2, ...)` it must call on completion. The first\n  argument is an error (which can be `null`) and any further arguments will be \n  passed as arguments in order to the next task.\n* `callback(err, [results])` - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n      // arg1 now equals 'one' and arg2 now equals 'two'\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n<a name=\"compose\" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions `f()`, `g()`, and `h()` would produce the result of\n`f(g(h()))`, only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* `functions...` - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name=\"seq\" />\n### seq(fn1, fn2...)\n\nVersion of the compose function that is more natural to read.\nEach following function consumes the return value of the latter function. \n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\n// Requires lodash (or underscore), express3 and dresende's orm2.\n// Part of an app, that fetches cats of the logged user.\n// This example uses `seq` function to avoid overnesting and error \n// handling clutter.\napp.get('/cats', function(request, response) {\n  function handleError(err, data, callback) {\n    if (err) {\n      console.error(err);\n      response.json({ status: 'error', message: err.message });\n    }\n    else {\n      callback(data);\n    }\n  }\n  var User = request.models.User;\n  async.seq(\n    _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n    handleError,\n    function(user, fn) {\n      user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n    },\n    handleError,\n    function(cats) {\n      response.json({ status: 'ok', message: 'Cats found', data: cats });\n    }\n  )(req.session.user_id);\n  }\n});\n```\n\n---------------------------------------\n<a name=\"applyEach\" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling \n`callback` after all functions have completed. If you only provide the first\nargument, then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* `fns` - the asynchronous functions to all call with the same arguments\n* `args...` - any number of separate arguments to pass to the function\n* `callback` - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], 'bucket', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name=\"applyEachSeries\" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as [`applyEach`](#applyEach) only the functions are applied in series.\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a `queue` object with the specified `concurrency`. Tasks added to the\n`queue` are processed in parallel (up to the `concurrency` limit). If all\n`worker`s are in progress, the task is queued until one becomes available. \nOnce a `worker` completes a `task`, that `task`'s callback is called.\n\n__Arguments__\n\n* `worker(task, callback)` - An asynchronous function for processing a queued\n  task, which must call its `callback(err)` argument when finished, with an \n  optional `error` as an argument.\n* `concurrency` - An `integer` for determining how many `worker` functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe `queue` object returned by this function has the following properties and\nmethods:\n\n* `length()` - a function returning the number of items waiting to be processed.\n* `started` - a function returning whether or not any items have been pushed and processed by the queue\n* `running()` - a function returning the number of items currently being processed.\n* `idle()` - a function returning false if there are items waiting or being processed, or true if not.\n* `concurrency` - an integer for determining how many `worker` functions should be\n  run in parallel. This property can be changed after a `queue` is created to\n  alter the concurrency on-the-fly.\n* `push(task, [callback])` - add a new task to the `queue`. Calls `callback` once \n  the `worker` has finished processing the task. Instead of a single task, a `tasks` array\n  can be submitted. The respective callback is used for every task in the list.\n* `unshift(task, [callback])` - add a new task to the front of the `queue`.\n* `saturated` - a callback that is called when the `queue` length hits the `concurrency` limit, \n   and further tasks will be queued.\n* `empty` - a callback that is called when the last item from the `queue` is given to a `worker`.\n* `drain` - a callback that is called when the last item from the `queue` has returned from the `worker`.\n* `paused` - a boolean for determining whether the queue is in a paused state\n* `pause()` - a function that pauses the processing of tasks until `resume()` is called.\n* `resume()` - a function that resumes the processing of queued tasks when the queue is paused.\n* `kill()` - a function that empties remaining tasks from the queue forcing it to go idle.\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n\n---------------------------------------\n\n<a name=\"priorityQueue\" />\n### priorityQueue(worker, concurrency)\n\nThe same as [`queue`](#queue) only tasks are assigned a priority and completed in ascending priority order. There are two differences between `queue` and `priorityQueue` objects:\n\n* `push(task, priority, [callback])` - `priority` should be a number. If an array of\n  `tasks` is given, all tasks will be assigned the same priority.\n* The `unshift` method was removed.\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a `cargo` object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the `payload` limit). If the\n`worker` is in progress, the task is queued until it becomes available. Once\nthe `worker` has completed some tasks, each callback of those tasks is called.\nCheck out [this animation](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) for how `cargo` and `queue` work.\n\nWhile [queue](#queue) passes only one task to one of a group of workers\nat a time, cargo passes an array of tasks to a single worker, repeating\nwhen the worker is finished.\n\n__Arguments__\n\n* `worker(tasks, callback)` - An asynchronous function for processing an array of\n  queued tasks, which must call its `callback(err)` argument when finished, with \n  an optional `err` argument.\n* `payload` - An optional `integer` for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe `cargo` object returned by this function has the following properties and\nmethods:\n\n* `length()` - A function returning the number of items waiting to be processed.\n* `payload` - An `integer` for determining how many tasks should be\n  process per round. This property can be changed after a `cargo` is created to\n  alter the payload on-the-fly.\n* `push(task, [callback])` - Adds `task` to the `queue`. The callback is called\n  once the `worker` has finished processing the task. Instead of a single task, an array of `tasks` \n  can be submitted. The respective callback is used for every task in the list.\n* `saturated` - A callback that is called when the `queue.length()` hits the concurrency and further tasks will be queued.\n* `empty` - A callback that is called when the last item from the `queue` is given to a `worker`.\n* `drain` - A callback that is called when the last item from the `queue` has returned from the `worker`.\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log('hello ' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running the functions in `tasks`, based on their \nrequirements. Each function can optionally depend on other functions being completed \nfirst, and each function is run as soon as its requirements are satisfied. \n\nIf any of the functions pass an error to their callback, it will not \ncomplete (so any other functions depending on it will not run), and the main \n`callback` is immediately called with the error. Functions also receive an \nobject containing the results of functions which have completed so far.\n\nNote, all functions are called with a `results` object as a second argument, \nso it is unsafe to pass functions in the `tasks` object which cannot handle the\nextra argument. \n\nFor example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, 'data.txt', 'utf-8')\n}, callback);\n```\n\nwill have the effect of calling `readFile` with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile('data.txt', 'utf-8', cb, {});\n```\n\nInstead, wrap the call to `readFile` in a function which does not forward the \n`results` object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile('data.txt', 'utf-8', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* `tasks` - An object. Each of its properties is either a function or an array of\n  requirements, with the function itself the last item in the array. The object's key\n  of a property serves as the name of the task defined by that property,\n  i.e. can be used when specifying requirements for other tasks.\n  The function receives two arguments: (1) a `callback(err, result)` which must be \n  called when finished, passing an `error` (which can be `null`) and the result of \n  the function's execution, and (2) a `results` object, containing the results of\n  the previously executed functions.\n* `callback(err, results)` - An optional callback which is called when all the\n  tasks have been completed. It receives the `err` argument if any `tasks` \n  pass an error to their callback. Results are always returned; however, if \n  an error occurs, no further `tasks` will be performed, and the results\n  object will only contain partial results.\n\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        console.log('in get_data');\n        // async code to get some data\n        callback(null, 'data', 'converted to array');\n    },\n    make_folder: function(callback){\n        console.log('in make_folder');\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n        callback(null, 'folder');\n    },\n    write_file: ['get_data', 'make_folder', function(callback, results){\n        console.log('in write_file', JSON.stringify(results));\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, 'filename');\n    }],\n    email_link: ['write_file', function(callback, results){\n        console.log('in email_link', JSON.stringify(results));\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n        callback(null, {'file':results.write_file, 'email':'user@example.com'});\n    }]\n}, function(err, results) {\n    console.log('err = ', err);\n    console.log('results = ', results);\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        console.log('in get_data');\n        // async code to get some data\n        callback(null, 'data', 'converted to array');\n    },\n    function(callback){\n        console.log('in make_folder');\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n        callback(null, 'folder');\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            console.log('in write_file', JSON.stringify(results));\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            results.push('filename');\n            callback(null);\n        },\n        function(callback){\n            console.log('in email_link', JSON.stringify(results));\n            // once the file is written let's email a link to it...\n            callback(null, {'file':results.pop(), 'email':'user@example.com'});\n        }\n    ]);\n});\n```\n\nFor a complicated series of `async` tasks, using the [`auto`](#auto) function makes adding\nnew tasks much easier (and the code more readable).\n\n\n---------------------------------------\n\n<a name=\"retry\" />\n### retry([times = 5], task, [callback])\n\nAttempts to get a successful response from `task` no more than `times` times before\nreturning an error. If the task is successful, the `callback` will be passed the result\nof the successfull task. If all attemps fail, the callback will be passed the error and\nresult (if any) of the final attempt.\n\n__Arguments__\n\n* `times` - An integer indicating how many times to attempt the `task` before giving up. Defaults to 5.\n* `task(callback, results)` - A function which receives two arguments: (1) a `callback(err, result)`\n  which must be called when finished, passing `err` (which can be `null`) and the `result` of \n  the function's execution, and (2) a `results` object, containing the results of\n  the previously executed functions (if nested inside another control flow).\n* `callback(err, results)` - An optional callback which is called when the\n  task has succeeded, or after the final failed attempt. It receives the `err` and `result` arguments of the last attempt at completing the `task`.\n\nThe [`retry`](#retry) function can be used as a stand-alone control flow by passing a\ncallback, as shown below:\n\n```js\nasync.retry(3, apiMethod, function(err, result) {\n    // do something with the result\n});\n```\n\nIt can also be embeded within other control flow functions to retry individual methods\nthat are not as reliable, like this:\n\n```js\nasync.auto({\n    users: api.getUsers.bind(api),\n    payments: async.retry(3, api.getPayments.bind(api))\n}, function(err, results) {\n  // do something with the results\n});\n```\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the `tasks` array,\nreturning a continuation to call the next one after that. It's also possible to\n“peek” at the next iterator with `iterator.next()`.\n\nThis function is used internally by the `async` module, but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* `tasks` - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied. \n\nUseful as a shorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* `function` - The function you want to eventually apply all arguments to.\n* `arguments...` - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls `callback` on a later loop around the event loop. In Node.js this just\ncalls `process.nextTick`; in the browser it falls back to `setImmediate(callback)`\nif available, otherwise `setTimeout(callback, 0)`, which means other higher priority\nevents may precede the execution of `callback`.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* `callback` - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the `callback` function `n` times, and accumulates results in the same manner\nyou would use with [`map`](#map).\n\n__Arguments__\n\n* `n` - The number of times to run the function.\n* `callback` - The function to call `n` times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as [`times`](#times), only the iterator is applied to each item in `arr` in\nseries. The next `iterator` is only called once the current one has completed. \nThe results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an `async` function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* `fn` - The function to proxy and cache results from.\n* `hasher` - Tn optional function for generating a custom hash for storing\n  results. It has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a [`memoize`](#memoize)d function, reverting it to the original, unmemoized\nform. Handy for testing.\n\n__Arguments__\n\n* `fn` - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an `async` function to the `console`. Only works in Node.js or\nin browsers that support `console.log` and `console.error` (such as FF and Chrome).\nIf multiple arguments are returned from the async function, `console.log` is\ncalled on each argument in order.\n\n__Arguments__\n\n* `function` - The function you want to eventually apply all arguments to.\n* `arguments...` - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an `async` function to the `console` using `console.dir` to\ndisplay the properties of the resulting object. Only works in Node.js or\nin browsers that support `console.dir` and `console.error` (such as FF and Chrome).\nIf multiple arguments are returned from the async function, `console.dir` is\ncalled on each argument in order.\n\n__Arguments__\n\n* `function` - The function you want to eventually apply all arguments to.\n* `arguments...` - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of `async` back to its original value, returning a reference to the\n`async` object.\n",
          "readmeFilename": "README.md",
          "homepage": "https://github.com/caolan/async",
          "_id": "async@0.9.0",
          "_shasum": "ac3613b1da9bed1b47510bb4651b8931e47146c7",
          "_from": "async@^0.9.0",
          "_resolved": "https://registry.npmjs.org/async/-/async-0.9.0.tgz"
        },
        "path": "node_modules/fs-utils/node_modules/async",
        "deps": {}
      },
      "delete": {
        "pkg": {
          "name": "delete",
          "description": "Delete files and folders and any intermediate directories if they exist (sync and async).",
          "version": "0.1.5",
          "homepage": "https://github.com/jonschlinkert/delete",
          "author": {
            "name": "Jon Schlinkert",
            "url": "https://github.com/jonschlinkert"
          },
          "repository": {
            "type": "git",
            "url": "git://github.com/jonschlinkert/delete.git"
          },
          "bugs": {
            "url": "https://github.com/jonschlinkert/delete/issues"
          },
          "licenses": [
            {
              "type": "MIT",
              "url": "https://github.com/jonschlinkert/delete/blob/master/LICENSE-MIT"
            }
          ],
          "keywords": [
            "check",
            "clean",
            "cleaning",
            "cleanup",
            "cwd",
            "del",
            "delete",
            "destroy",
            "dir",
            "directory",
            "file",
            "filepath",
            "files",
            "filesystem",
            "folder",
            "fs",
            "glob",
            "inside",
            "path",
            "pwd",
            "relative",
            "remove",
            "rimraf",
            "rm",
            "rmdir",
            "rmrf",
            "trash",
            "unlink"
          ],
          "main": "index.js",
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha -R spec"
          },
          "devDependencies": {
            "chai": "~1.9.1",
            "mocha": "*",
            "verb": "~0.2.6",
            "write": "^0.1.1"
          },
          "dependencies": {
            "is-path-cwd": "^0.1.0",
            "is-path-in-cwd": "^0.1.1",
            "rimraf": "^2.2.8"
          },
          "readme": "# delete [![NPM version](https://badge.fury.io/js/delete.png)](http://badge.fury.io/js/delete)\n\n> Delete files and folders and any intermediate directories if they exist (sync and async).\n\nAlso see\n* [del](https://github.com/sindresorhus/del) if you need globbing. This lib was inspired by **del**, I wanted a quick solution that prevented accidental deletion of files outside the current working directory, but for individual files and without the extra dependencies.\n* [write](https://github.com/jonschlinkert/write) for writing files to disk.\n\n## Install\nInstall with [npm](npmjs.org):\n\n```bash\nnpm i delete --save-dev\n```\n\n## Usage\n\n```js\nvar del = require('delete');\n\n// delete files asynchronously\ndel('tmp/foo.md', function(err) {\n  if (err) {throw err;}\n});\n\n// delete files synchronously\ndel.sync('tmp/foo.md');\n```\n\n### options.force\n\nAn error is thrown if you try to delete files outside of the current working directory (cwd).\n\nOverride the default behavior:\n\n```js\ndel.sync('../foo.md', {force: true});\n```\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on September 22, 2014._",
          "readmeFilename": "README.md",
          "_id": "delete@0.1.5",
          "_shasum": "3ee65797f5bead71c82c8526562d6643759da9c3",
          "_from": "delete@^0.1.5"
        },
        "path": "node_modules/fs-utils/node_modules/delete",
        "deps": {
          "is-path-cwd": {
            "pkg": {
              "name": "is-path-cwd",
              "version": "0.1.0",
              "description": "Check if a path is CWD",
              "license": "MIT",
              "repository": {
                "type": "git",
                "url": "git://github.com/sindresorhus/is-path-cwd"
              },
              "author": {
                "name": "Sindre Sorhus",
                "email": "sindresorhus@gmail.com",
                "url": "http://sindresorhus.com"
              },
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha"
              },
              "files": [
                "index.js"
              ],
              "keywords": [
                "path",
                "cwd",
                "pwd",
                "check",
                "filepath",
                "file",
                "folder"
              ],
              "devDependencies": {
                "mocha": "*"
              },
              "readme": "# is-path-cwd [![Build Status](https://travis-ci.org/sindresorhus/is-path-cwd.svg?branch=master)](https://travis-ci.org/sindresorhus/is-path-cwd)\n\n> Check if a path is [CWD](http://en.wikipedia.org/wiki/Working_directory)\n\n\n## Install\n\n```sh\n$ npm install --save is-path-cwd\n```\n\n\n## Usage\n\n```js\nvar isPathCwd = require('is-path-cwd');\n\nisPathCwd(process.cwd());\n//=> true\n\nisPathCwd('unicorn');\n//=> false\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
              "readmeFilename": "readme.md",
              "bugs": {
                "url": "https://github.com/sindresorhus/is-path-cwd/issues"
              },
              "homepage": "https://github.com/sindresorhus/is-path-cwd",
              "_id": "is-path-cwd@0.1.0",
              "_shasum": "df3c09a7cab10bd40b9d1cdfae485bd882d4b1ab",
              "_from": "is-path-cwd@^0.1.0",
              "_resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-0.1.0.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/delete/node_modules/is-path-cwd",
            "deps": {}
          },
          "is-path-in-cwd": {
            "pkg": {
              "name": "is-path-in-cwd",
              "version": "0.1.1",
              "description": "Check if a path is in the current working directory",
              "license": "MIT",
              "repository": {
                "type": "git",
                "url": "git://github.com/sindresorhus/is-path-in-cwd"
              },
              "author": {
                "name": "Sindre Sorhus",
                "email": "sindresorhus@gmail.com",
                "url": "http://sindresorhus.com"
              },
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha"
              },
              "files": [
                "index.js"
              ],
              "keywords": [
                "path",
                "cwd",
                "pwd",
                "check",
                "filepath",
                "file",
                "folder",
                "in",
                "inside"
              ],
              "dependencies": {
                "is-path-inside": "^0.1.0"
              },
              "devDependencies": {
                "mocha": "*"
              },
              "readme": "# is-path-in-cwd [![Build Status](https://travis-ci.org/sindresorhus/is-path-in-cwd.svg?branch=master)](https://travis-ci.org/sindresorhus/is-path-in-cwd)\n\n> Check if a path is in the [current working directory](http://en.wikipedia.org/wiki/Working_directory)\n\n\n## Install\n\n```sh\n$ npm install --save is-path-in-cwd\n```\n\n\n## Usage\n\n```js\nvar isPathInCwd = require('is-path-in-cwd');\n\nisPathInCwd('unicorn');\n//=> true\n\nisPathInCwd('../rainbow');\n//=> false\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
              "readmeFilename": "readme.md",
              "bugs": {
                "url": "https://github.com/sindresorhus/is-path-in-cwd/issues"
              },
              "homepage": "https://github.com/sindresorhus/is-path-in-cwd",
              "_id": "is-path-in-cwd@0.1.1",
              "_shasum": "aa91ec89e13d63e3efc6847cac4cf29c99f92465",
              "_from": "is-path-in-cwd@^0.1.1",
              "_resolved": "https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-0.1.1.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/delete/node_modules/is-path-in-cwd",
            "deps": {
              "is-path-inside": {
                "pkg": {
                  "name": "is-path-inside",
                  "version": "0.1.0",
                  "description": "Check if a path is inside another path",
                  "license": "MIT",
                  "repository": {
                    "type": "git",
                    "url": "git://github.com/sindresorhus/is-path-inside"
                  },
                  "author": {
                    "name": "Sindre Sorhus",
                    "email": "sindresorhus@gmail.com",
                    "url": "http://sindresorhus.com"
                  },
                  "engines": {
                    "node": ">=0.10.0"
                  },
                  "scripts": {
                    "test": "mocha"
                  },
                  "files": [
                    "index.js"
                  ],
                  "keywords": [
                    "path",
                    "inside",
                    "folder",
                    "directory",
                    "dir",
                    "file",
                    "resolve"
                  ],
                  "dependencies": {
                    "path-is-inside": "^1.0.1"
                  },
                  "devDependencies": {
                    "mocha": "*"
                  },
                  "readme": "# is-path-inside [![Build Status](https://travis-ci.org/sindresorhus/is-path-inside.svg?branch=master)](https://travis-ci.org/sindresorhus/is-path-inside)\n\n> Check if a path is inside another path\n\n\n## Install\n\n```sh\n$ npm install --save is-path-inside\n```\n\n\n## Usage\n\n```js\nvar isPathInside = require('is-path-inside');\n\nisPathInside('a/b', 'a/b/c');\n//=> true\n\nisPathInside('x/y', 'a/b/c');\n//=> false\n\nisPathInside('a/b/c', 'a/b/c');\n//=> false\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
                  "readmeFilename": "readme.md",
                  "bugs": {
                    "url": "https://github.com/sindresorhus/is-path-inside/issues"
                  },
                  "homepage": "https://github.com/sindresorhus/is-path-inside",
                  "_id": "is-path-inside@0.1.0",
                  "_shasum": "80a5625e69ec88acd0ebe7bc06ecb89a1438de94",
                  "_from": "is-path-inside@^0.1.0",
                  "_resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-0.1.0.tgz"
                },
                "path": "node_modules/fs-utils/node_modules/delete/node_modules/is-path-in-cwd/node_modules/is-path-inside",
                "deps": {
                  "path-is-inside": {
                    "pkg": {
                      "name": "path-is-inside",
                      "description": "Tests whether one path is inside another path",
                      "keywords": [
                        "path",
                        "directory",
                        "folder",
                        "inside",
                        "relative"
                      ],
                      "version": "1.0.1",
                      "author": {
                        "name": "Domenic Denicola",
                        "email": "domenic@domenicdenicola.com",
                        "url": "http://domenic.me"
                      },
                      "license": "WTFPL",
                      "repository": {
                        "type": "git",
                        "url": "git://github.com/domenic/path-is-inside.git"
                      },
                      "bugs": {
                        "url": "http://github.com/domenic/path-is-inside/issues"
                      },
                      "main": "lib/path-is-inside.js",
                      "scripts": {
                        "test": "mocha",
                        "lint": "jshint lib"
                      },
                      "devDependencies": {
                        "jshint": "~2.3.0",
                        "mocha": "~1.15.1"
                      },
                      "readme": "# Is This Path Inside This Other Path?\n\nIt turns out this question isn't trivial to answer using Node's built-in path APIs. A naive `indexOf`-based solution will fail sometimes on Windows, which is case-insensitive (see e.g. [isaacs/npm#4214][]). You might then think to be clever with `path.resolve`, but you have to be careful to account for situations whether the paths have different drive letters, or else you'll cause bugs like [isaacs/npm#4313][]. And let's not even get started on trailing slashes.\n\nThe **path-is-inside** package will give you a robust, cross-platform way of detecting whether a given path is inside another path.\n\n## Usage\n\nPretty simple. First the path being tested; then the potential parent. Like so:\n\n```js\nvar pathIsInside = require(\"path-is-inside\");\n\npathIsInside(\"/x/y/z\", \"/x/y\") // true\npathIsInside(\"/x/y\", \"/x/y/z\") // false\n```\n\n## OS-Specific Behavior\n\nLike Node's built-in path module, path-is-inside treats all file paths on Windows as case-insensitive, whereas it treats all file paths on *-nix operating systems as case-sensitive. Keep this in mind especially when working on a Mac, where, despite Node's defaults, the OS usually treats paths case-insensitively.\n\nIn practice, this means:\n\n```js\n// On Windows\n\npathIsInside(\"C:\\\\X\\\\Y\\\\Z\", \"C:\\\\x\\\\y\") // true\n\n// On *-nix, including Mac OS X\n\npathIsInside(\"/X/Y/Z\", \"/x/y\") // false\n```\n\n[isaacs/npm#4214]: https://github.com/isaacs/npm/pull/4214\n[isaacs/npm#4313]: https://github.com/isaacs/npm/issues/4313\n",
                      "readmeFilename": "README.md",
                      "homepage": "https://github.com/domenic/path-is-inside",
                      "_id": "path-is-inside@1.0.1",
                      "_shasum": "98d8f1d030bf04bd7aeee4a1ba5485d40318fd89",
                      "_from": "path-is-inside@^1.0.1",
                      "_resolved": "https://registry.npmjs.org/path-is-inside/-/path-is-inside-1.0.1.tgz"
                    },
                    "path": "node_modules/fs-utils/node_modules/delete/node_modules/is-path-in-cwd/node_modules/is-path-inside/node_modules/path-is-inside",
                    "deps": {}
                  }
                }
              }
            }
          },
          "rimraf": {
            "pkg": {
              "name": "rimraf",
              "version": "2.2.8",
              "main": "rimraf.js",
              "description": "A deep deletion module for node (like `rm -rf`)",
              "author": {
                "name": "Isaac Z. Schlueter",
                "email": "i@izs.me",
                "url": "http://blog.izs.me/"
              },
              "license": {
                "type": "MIT",
                "url": "https://github.com/isaacs/rimraf/raw/master/LICENSE"
              },
              "repository": {
                "type": "git",
                "url": "git://github.com/isaacs/rimraf.git"
              },
              "scripts": {
                "test": "cd test && bash run.sh"
              },
              "bin": {
                "rimraf": "./bin.js"
              },
              "contributors": [
                {
                  "name": "Isaac Z. Schlueter",
                  "email": "i@izs.me",
                  "url": "http://blog.izs.me"
                },
                {
                  "name": "Wayne Larsen",
                  "email": "wayne@larsen.st",
                  "url": "http://github.com/wvl"
                },
                {
                  "name": "ritch",
                  "email": "skawful@gmail.com"
                },
                {
                  "name": "Marcel Laverdet"
                },
                {
                  "name": "Yosef Dinerstein",
                  "email": "yosefd@microsoft.com"
                }
              ],
              "readme": "`rm -rf` for node.\n\nInstall with `npm install rimraf`, or just drop rimraf.js somewhere.\n\n## API\n\n`rimraf(f, callback)`\n\nThe callback will be called with an error if there is one.  Certain\nerrors are handled for you:\n\n* Windows: `EBUSY` and `ENOTEMPTY` - rimraf will back off a maximum of\n  `opts.maxBusyTries` times before giving up.\n* `ENOENT` - If the file doesn't exist, rimraf will return\n  successfully, since your desired outcome is already the case.\n\n## rimraf.sync\n\nIt can remove stuff synchronously, too.  But that's not so good.  Use\nthe async API.  It's better.\n\n## CLI\n\nIf installed with `npm install rimraf -g` it can be used as a global\ncommand `rimraf <path>` which is useful for cross platform support.\n\n## mkdirp\n\nIf you need to create a directory recursively, check out\n[mkdirp](https://github.com/substack/node-mkdirp).\n",
              "readmeFilename": "README.md",
              "bugs": {
                "url": "https://github.com/isaacs/rimraf/issues"
              },
              "homepage": "https://github.com/isaacs/rimraf",
              "_id": "rimraf@2.2.8",
              "_shasum": "e439be2aaee327321952730f99a8929e4fc50582",
              "_from": "rimraf@^2.2.8",
              "_resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.2.8.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/delete/node_modules/rimraf",
            "deps": {}
          }
        }
      },
      "extend-shallow": {
        "pkg": {
          "name": "extend-shallow",
          "description": "Extend javascript object A with the properties of object B.",
          "version": "0.1.0",
          "homepage": "https://github.com/jonschlinkert/extend-shallow",
          "author": {
            "name": "Jon Schlinkert",
            "url": "https://github.com/jonschlinkert"
          },
          "repository": {
            "type": "git",
            "url": "git://github.com/jonschlinkert/extend-shallow.git"
          },
          "bugs": {
            "url": "https://github.com/jonschlinkert/extend-shallow/issues"
          },
          "licenses": [
            {
              "type": "MIT",
              "url": "https://github.com/jonschlinkert/extend-shallow/blob/master/LICENSE-MIT"
            }
          ],
          "main": "index.js",
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha -R spec"
          },
          "devDependencies": {
            "mocha": "*",
            "should": "^4.0.4",
            "verb": ">= 0.2.6"
          },
          "keywords": [
            "extend",
            "keys",
            "merge",
            "obj",
            "object",
            "prop",
            "properties",
            "property",
            "props"
          ],
          "readme": "# extend-shallow [![NPM version](https://badge.fury.io/js/extend-shallow.svg)](http://badge.fury.io/js/extend-shallow)\n\n\n> Extend javascript object A with the properties of object B.\n\n## Install\n#### Install with [npm](npmjs.org):\n\n```bash\nnpm i extend-shallow --save-dev\n```\n\n## Run tests\n\n```bash\nnpm test\n```\n\n## Usage\n\n```js\nvar extend = require('extend-shallow');\n\nextend({a: 'b'}, {c: 'd'})\n//=> {a: 'b', c: 'd'}\n```\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 06, 2014._",
          "readmeFilename": "README.md",
          "_id": "extend-shallow@0.1.0",
          "_shasum": "3992b6a016e9562db4cbe3ac55977e09b2ff3415",
          "_from": "extend-shallow@^0.1.0"
        },
        "path": "node_modules/fs-utils/node_modules/extend-shallow",
        "deps": {}
      },
      "globby": {
        "pkg": {
          "name": "globby",
          "version": "0.1.1",
          "description": "Extends `glob` with support for multiple patterns",
          "license": "MIT",
          "repository": {
            "type": "git",
            "url": "git://github.com/sindresorhus/globby"
          },
          "author": {
            "name": "Sindre Sorhus",
            "email": "sindresorhus@gmail.com",
            "url": "http://sindresorhus.com"
          },
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha"
          },
          "files": [
            "index.js"
          ],
          "keywords": [
            "glob",
            "globs",
            "globbing",
            "minimatch",
            "match",
            "matcher",
            "pattern",
            "patterns",
            "find",
            "paths",
            "files",
            "folders",
            "dirs",
            "directories",
            "wildcard",
            "wildcards",
            "expand",
            "multi",
            "multiple",
            "array",
            "all",
            "gulpfriendly",
            "fnmatch",
            "traverse",
            "filesystem",
            "fs",
            "filter",
            "util",
            "utility"
          ],
          "dependencies": {
            "array-differ": "^0.1.0",
            "array-union": "^0.1.0",
            "async": "^0.9.0",
            "glob": "^4.0.2"
          },
          "devDependencies": {
            "mocha": "*"
          },
          "readme": "# globby [![Build Status](https://travis-ci.org/sindresorhus/globby.svg?branch=master)](https://travis-ci.org/sindresorhus/globby)\n\n> Extends [glob](https://github.com/isaacs/node-glob) with support for multiple patterns\n\n\n## Install\n\n```sh\n$ npm install --save globby\n```\n\n\n## Usage\n\n```\n├── unicorn\n├── cake\n└── rainbow\n```\n\n```js\nvar globby = require('globby');\n\nglobby(['*', '!cake'], function (err, paths) {\n\tconsole.log(paths);\n\t//=> ['unicorn', 'rainbows']\n});\n```\n\n\n## API\n\n### globby(patterns, [options], callback)\n\n### globby.sync(patterns, [options])\n\n#### patterns\n\n*Required*  \nType: `string`, `array`\n\nSee supported minimatch [patterns](https://github.com/isaacs/minimatch#usage).\n\n#### options\n\nType: `object`\n\nSee the node-glob [options](https://github.com/isaacs/node-glob#properties).\n\n#### callback(err, paths)\n\n\n## Globbing patterns\n\nJust a quick overview.\n\n- `*` matches any number of characters, but not `/`\n- `?` matches a single character, but not `/`\n- `**` matches any number of characters, including `/`, as long as it's the only thing in a path part\n- `{}` allows for a comma-separated list of \"or\" expressions\n- `!` at the beginning of a pattern will negate the match\n\n[Various patterns and expected matches](https://github.com/sindresorhus/multimatch/blob/master/test.js).\n\n\n## Related\n\nSee [multimatch](https://github.com/sindresorhus/multimatch) if you need to match against a list instead of the filesystem.\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
          "readmeFilename": "readme.md",
          "bugs": {
            "url": "https://github.com/sindresorhus/globby/issues"
          },
          "homepage": "https://github.com/sindresorhus/globby",
          "_id": "globby@0.1.1",
          "_shasum": "cbec63df724b4bea458b79a16cc0e3b1f2ca8620",
          "_from": "globby@^0.1.1",
          "_resolved": "https://registry.npmjs.org/globby/-/globby-0.1.1.tgz"
        },
        "path": "node_modules/fs-utils/node_modules/globby",
        "deps": {
          "array-differ": {
            "pkg": {
              "name": "array-differ",
              "version": "0.1.0",
              "description": "Create an array with values that are present in the first input array but not additional ones",
              "license": "MIT",
              "repository": {
                "type": "git",
                "url": "git://github.com/sindresorhus/array-differ"
              },
              "author": {
                "name": "Sindre Sorhus",
                "email": "sindresorhus@gmail.com",
                "url": "http://sindresorhus.com"
              },
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha"
              },
              "files": [
                "index.js"
              ],
              "keywords": [
                "array",
                "difference",
                "diff",
                "differ",
                "filter",
                "exclude"
              ],
              "devDependencies": {
                "mocha": "*"
              },
              "readme": "# array-differ [![Build Status](https://travis-ci.org/sindresorhus/array-differ.svg?branch=master)](https://travis-ci.org/sindresorhus/array-differ)\n\n> Create an array with values that are present in the first input array but not additional ones\n\n\n## Install\n\n```sh\n$ npm install --save array-differ\n```\n\n\n## Usage\n\n```js\nvar arrayDiffer = require('array-differ');\n\narrayDiffer([2, 3, 4], [3, 50]);\n//=> [2, 4]\n```\n\n## API\n\n### arrayDiffer(input, values, [values, ...])\n\nReturns the new array.\n\n#### input\n\nType: `array`\n\n#### values\n\nType: `array`\n\nArrays of values to exclude.\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
              "readmeFilename": "readme.md",
              "bugs": {
                "url": "https://github.com/sindresorhus/array-differ/issues"
              },
              "homepage": "https://github.com/sindresorhus/array-differ",
              "_id": "array-differ@0.1.0",
              "_shasum": "12e2c9b706bed47c8b483b57e487473fb0861f3a",
              "_from": "array-differ@^0.1.0",
              "_resolved": "https://registry.npmjs.org/array-differ/-/array-differ-0.1.0.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/globby/node_modules/array-differ",
            "deps": {}
          },
          "array-union": {
            "pkg": {
              "name": "array-union",
              "version": "0.1.0",
              "description": "Creates an array of unique values, in order, from the input arrays",
              "license": "MIT",
              "repository": {
                "type": "git",
                "url": "git://github.com/sindresorhus/array-union"
              },
              "author": {
                "name": "Sindre Sorhus",
                "email": "sindresorhus@gmail.com",
                "url": "http://sindresorhus.com"
              },
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha"
              },
              "files": [
                "index.js"
              ],
              "keywords": [
                "array",
                "arr",
                "set",
                "uniq",
                "unique",
                "duplicate",
                "remove",
                "union",
                "combine",
                "merge"
              ],
              "dependencies": {
                "array-uniq": "^0.1.0"
              },
              "devDependencies": {
                "mocha": "*"
              },
              "readme": "# array-union [![Build Status](https://travis-ci.org/sindresorhus/array-union.svg?branch=master)](https://travis-ci.org/sindresorhus/array-union)\n\n> Creates an array of unique values, in order, from the input arrays\n\n\n## Install\n\n```sh\n$ npm install --save array-union\n```\n\n\n## Usage\n\n```js\nvar arrayUnion = require('array-union');\n\narrayUnion([1, 1, 2, 3], [2, 3]);\n//=> [1, 2, 3]\n\narrayUnion(['foo', 'foo', 'bar'], ['foo']);\n//=> ['foo', 'bar']\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
              "readmeFilename": "readme.md",
              "bugs": {
                "url": "https://github.com/sindresorhus/array-union/issues"
              },
              "homepage": "https://github.com/sindresorhus/array-union",
              "_id": "array-union@0.1.0",
              "_shasum": "ede98088330665e699e1ebf0227cbc6034e627db",
              "_from": "array-union@^0.1.0",
              "_resolved": "https://registry.npmjs.org/array-union/-/array-union-0.1.0.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/globby/node_modules/array-union",
            "deps": {
              "array-uniq": {
                "pkg": {
                  "name": "array-uniq",
                  "version": "0.1.1",
                  "description": "Create an array without duplicates",
                  "license": "MIT",
                  "repository": {
                    "type": "git",
                    "url": "git://github.com/sindresorhus/array-uniq"
                  },
                  "author": {
                    "name": "Sindre Sorhus",
                    "email": "sindresorhus@gmail.com",
                    "url": "http://sindresorhus.com"
                  },
                  "engines": {
                    "node": ">=0.10.0"
                  },
                  "scripts": {
                    "test": "mocha"
                  },
                  "files": [
                    "index.js"
                  ],
                  "keywords": [
                    "array",
                    "arr",
                    "set",
                    "uniq",
                    "unique",
                    "es6",
                    "duplicate",
                    "remove"
                  ],
                  "devDependencies": {
                    "es6-set": "^0.1.0",
                    "mocha": "*"
                  },
                  "readme": "# array-uniq [![Build Status](https://travis-ci.org/sindresorhus/array-uniq.svg?branch=master)](https://travis-ci.org/sindresorhus/array-uniq)\n\n> Create an array without duplicates\n\nIt's already pretty fast, but will be much faster when [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) becomes available in V8 (especially with large arrays).\n\n\n## Install\n\n```sh\n$ npm install --save array-uniq\n```\n\n\n## Usage\n\n```js\nvar arrayUniq = require('array-uniq');\n\narrayUniq([1, 1, 2, 3, 3]);\n//=> [1, 2, 3]\n\narrayUniq(['foo', 'foo', 'bar', 'foo']);\n//=> ['foo', 'bar']\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
                  "readmeFilename": "readme.md",
                  "bugs": {
                    "url": "https://github.com/sindresorhus/array-uniq/issues"
                  },
                  "homepage": "https://github.com/sindresorhus/array-uniq",
                  "_id": "array-uniq@0.1.1",
                  "_shasum": "5861f3ed4e4bb6175597a4e078e8aa78ebe958c7",
                  "_from": "array-uniq@^0.1.0",
                  "_resolved": "https://registry.npmjs.org/array-uniq/-/array-uniq-0.1.1.tgz"
                },
                "path": "node_modules/fs-utils/node_modules/globby/node_modules/array-union/node_modules/array-uniq",
                "deps": {}
              }
            }
          },
          "async": {
            "pkg": {
              "name": "globby",
              "version": "0.1.1",
              "description": "Extends `glob` with support for multiple patterns",
              "license": "MIT",
              "repository": {
                "type": "git",
                "url": "git://github.com/sindresorhus/globby"
              },
              "author": {
                "name": "Sindre Sorhus",
                "email": "sindresorhus@gmail.com",
                "url": "http://sindresorhus.com"
              },
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha"
              },
              "files": [
                "index.js"
              ],
              "keywords": [
                "glob",
                "globs",
                "globbing",
                "minimatch",
                "match",
                "matcher",
                "pattern",
                "patterns",
                "find",
                "paths",
                "files",
                "folders",
                "dirs",
                "directories",
                "wildcard",
                "wildcards",
                "expand",
                "multi",
                "multiple",
                "array",
                "all",
                "gulpfriendly",
                "fnmatch",
                "traverse",
                "filesystem",
                "fs",
                "filter",
                "util",
                "utility"
              ],
              "dependencies": {
                "array-differ": "^0.1.0",
                "array-union": "^0.1.0",
                "async": "^0.9.0",
                "glob": "^4.0.2"
              },
              "devDependencies": {
                "mocha": "*"
              },
              "readme": "# globby [![Build Status](https://travis-ci.org/sindresorhus/globby.svg?branch=master)](https://travis-ci.org/sindresorhus/globby)\n\n> Extends [glob](https://github.com/isaacs/node-glob) with support for multiple patterns\n\n\n## Install\n\n```sh\n$ npm install --save globby\n```\n\n\n## Usage\n\n```\n├── unicorn\n├── cake\n└── rainbow\n```\n\n```js\nvar globby = require('globby');\n\nglobby(['*', '!cake'], function (err, paths) {\n\tconsole.log(paths);\n\t//=> ['unicorn', 'rainbows']\n});\n```\n\n\n## API\n\n### globby(patterns, [options], callback)\n\n### globby.sync(patterns, [options])\n\n#### patterns\n\n*Required*  \nType: `string`, `array`\n\nSee supported minimatch [patterns](https://github.com/isaacs/minimatch#usage).\n\n#### options\n\nType: `object`\n\nSee the node-glob [options](https://github.com/isaacs/node-glob#properties).\n\n#### callback(err, paths)\n\n\n## Globbing patterns\n\nJust a quick overview.\n\n- `*` matches any number of characters, but not `/`\n- `?` matches a single character, but not `/`\n- `**` matches any number of characters, including `/`, as long as it's the only thing in a path part\n- `{}` allows for a comma-separated list of \"or\" expressions\n- `!` at the beginning of a pattern will negate the match\n\n[Various patterns and expected matches](https://github.com/sindresorhus/multimatch/blob/master/test.js).\n\n\n## Related\n\nSee [multimatch](https://github.com/sindresorhus/multimatch) if you need to match against a list instead of the filesystem.\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
              "readmeFilename": "readme.md",
              "bugs": {
                "url": "https://github.com/sindresorhus/globby/issues"
              },
              "homepage": "https://github.com/sindresorhus/globby",
              "_id": "globby@0.1.1",
              "_shasum": "cbec63df724b4bea458b79a16cc0e3b1f2ca8620",
              "_from": "globby@^0.1.1",
              "_resolved": "https://registry.npmjs.org/globby/-/globby-0.1.1.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/globby/node_modules/async",
            "deps": {}
          },
          "glob": {
            "pkg": {
              "author": {
                "name": "Isaac Z. Schlueter",
                "email": "i@izs.me",
                "url": "http://blog.izs.me/"
              },
              "name": "glob",
              "description": "a little globber",
              "version": "4.0.6",
              "repository": {
                "type": "git",
                "url": "git://github.com/isaacs/node-glob.git"
              },
              "main": "glob.js",
              "engines": {
                "node": "*"
              },
              "dependencies": {
                "graceful-fs": "^3.0.2",
                "inherits": "2",
                "minimatch": "^1.0.0",
                "once": "^1.3.0"
              },
              "devDependencies": {
                "tap": "~0.4.0",
                "mkdirp": "0",
                "rimraf": "1"
              },
              "scripts": {
                "test": "tap test/*.js",
                "test-regen": "TEST_REGEN=1 node test/00-setup.js"
              },
              "license": "ISC",
              "readme": "# Glob\n\nMatch files using the patterns the shell uses, like stars and stuff.\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n![](oh-my-glob.gif)\n\n## Usage\n\n```javascript\nvar glob = require(\"glob\")\n\n// options is optional\nglob(\"**/*.js\", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is [\"**/*.js\"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* \"Globstar\" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options])\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require(\"glob\").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt's an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n* `statCache` Collection of all the stat results the glob search\n  performed.\n* `cache` Convenience object.  Each field has the following possible\n  values:\n  * `false` - Path does not exist\n  * `true` - Path exists\n  * `1` - Path exists, and is not a directory\n  * `2` - Path exists, and is a directory\n  * `[file, entries, ...]` - Path exists, is a directory, and the\n    array value is the results of `fs.readdir`\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, \"/\")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `dot` Include `.dot` files in normal matches and `globstar` matches.\n  Note that an explicit dot in a portion of the pattern will always\n  match dot files.\n* `nomount` By default, a pattern starting with a forward-slash will be\n  \"mounted\" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don't sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `cache` See `cache` property above.  Pass in a previously generated\n  cache object to save some fs calls.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See \"Race Conditions\" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than\n`\"*a?\"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the cache or statCache objects are reused between glob\ncalls.\n\nUsers are thus advised not to use a glob result as a guarantee of\nfilesystem state in the face of rapid changes.  For the vast majority\nof operations, this is never a problem.\n",
              "readmeFilename": "README.md",
              "bugs": {
                "url": "https://github.com/isaacs/node-glob/issues"
              },
              "homepage": "https://github.com/isaacs/node-glob",
              "_id": "glob@4.0.6",
              "_shasum": "695c50bdd4e2fb5c5d370b091f388d3707e291a7",
              "_from": "glob@^4.0.2",
              "_resolved": "https://registry.npmjs.org/glob/-/glob-4.0.6.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/globby/node_modules/glob",
            "deps": {
              "graceful-fs": {
                "pkg": {
                  "author": {
                    "name": "Isaac Z. Schlueter",
                    "email": "i@izs.me",
                    "url": "http://blog.izs.me/"
                  },
                  "name": "glob",
                  "description": "a little globber",
                  "version": "4.0.6",
                  "repository": {
                    "type": "git",
                    "url": "git://github.com/isaacs/node-glob.git"
                  },
                  "main": "glob.js",
                  "engines": {
                    "node": "*"
                  },
                  "dependencies": {
                    "graceful-fs": "^3.0.2",
                    "inherits": "2",
                    "minimatch": "^1.0.0",
                    "once": "^1.3.0"
                  },
                  "devDependencies": {
                    "tap": "~0.4.0",
                    "mkdirp": "0",
                    "rimraf": "1"
                  },
                  "scripts": {
                    "test": "tap test/*.js",
                    "test-regen": "TEST_REGEN=1 node test/00-setup.js"
                  },
                  "license": "ISC",
                  "readme": "# Glob\n\nMatch files using the patterns the shell uses, like stars and stuff.\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n![](oh-my-glob.gif)\n\n## Usage\n\n```javascript\nvar glob = require(\"glob\")\n\n// options is optional\nglob(\"**/*.js\", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is [\"**/*.js\"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* \"Globstar\" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options])\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require(\"glob\").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt's an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n* `statCache` Collection of all the stat results the glob search\n  performed.\n* `cache` Convenience object.  Each field has the following possible\n  values:\n  * `false` - Path does not exist\n  * `true` - Path exists\n  * `1` - Path exists, and is not a directory\n  * `2` - Path exists, and is a directory\n  * `[file, entries, ...]` - Path exists, is a directory, and the\n    array value is the results of `fs.readdir`\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, \"/\")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `dot` Include `.dot` files in normal matches and `globstar` matches.\n  Note that an explicit dot in a portion of the pattern will always\n  match dot files.\n* `nomount` By default, a pattern starting with a forward-slash will be\n  \"mounted\" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don't sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `cache` See `cache` property above.  Pass in a previously generated\n  cache object to save some fs calls.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See \"Race Conditions\" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than\n`\"*a?\"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the cache or statCache objects are reused between glob\ncalls.\n\nUsers are thus advised not to use a glob result as a guarantee of\nfilesystem state in the face of rapid changes.  For the vast majority\nof operations, this is never a problem.\n",
                  "readmeFilename": "README.md",
                  "bugs": {
                    "url": "https://github.com/isaacs/node-glob/issues"
                  },
                  "homepage": "https://github.com/isaacs/node-glob",
                  "_id": "glob@4.0.6",
                  "_shasum": "695c50bdd4e2fb5c5d370b091f388d3707e291a7",
                  "_from": "glob@^4.0.2",
                  "_resolved": "https://registry.npmjs.org/glob/-/glob-4.0.6.tgz"
                },
                "path": "node_modules/fs-utils/node_modules/globby/node_modules/glob/node_modules/graceful-fs",
                "deps": null
              },
              "inherits": {
                "pkg": {
                  "name": "inherits",
                  "description": "Browser-friendly inheritance fully compatible with standard node.js inherits()",
                  "version": "2.0.1",
                  "keywords": [
                    "inheritance",
                    "class",
                    "klass",
                    "oop",
                    "object-oriented",
                    "inherits",
                    "browser",
                    "browserify"
                  ],
                  "main": "./inherits.js",
                  "browser": "./inherits_browser.js",
                  "repository": {
                    "type": "git",
                    "url": "git://github.com/isaacs/inherits"
                  },
                  "license": "ISC",
                  "scripts": {
                    "test": "node test"
                  },
                  "readme": "Browser-friendly inheritance fully compatible with standard node.js\n[inherits](http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor).\n\nThis package exports standard `inherits` from node.js `util` module in\nnode environment, but also provides alternative browser-friendly\nimplementation through [browser\nfield](https://gist.github.com/shtylman/4339901). Alternative\nimplementation is a literal copy of standard one located in standalone\nmodule to avoid requiring of `util`. It also has a shim for old\nbrowsers with no `Object.create` support.\n\nWhile keeping you sure you are using standard `inherits`\nimplementation in node.js environment, it allows bundlers such as\n[browserify](https://github.com/substack/node-browserify) to not\ninclude full `util` package to your client code if all you need is\njust `inherits` function. It worth, because browser shim for `util`\npackage is large and `inherits` is often the single function you need\nfrom it.\n\nIt's recommended to use this package instead of\n`require('util').inherits` for any code that has chances to be used\nnot only in node.js but in browser too.\n\n## usage\n\n```js\nvar inherits = require('inherits');\n// then use exactly as the standard one\n```\n\n## note on version ~1.0\n\nVersion ~1.0 had completely different motivation and is not compatible\nneither with 2.0 nor with standard node.js `inherits`.\n\nIf you are using version ~1.0 and planning to switch to ~2.0, be\ncareful:\n\n* new version uses `super_` instead of `super` for referencing\n  superclass\n* new version overwrites current prototype while old one preserves any\n  existing fields on it\n",
                  "readmeFilename": "README.md",
                  "bugs": {
                    "url": "https://github.com/isaacs/inherits/issues"
                  },
                  "homepage": "https://github.com/isaacs/inherits",
                  "_id": "inherits@2.0.1",
                  "_shasum": "b17d08d326b4423e568eff719f91b0b1cbdf69f1",
                  "_from": "inherits@2",
                  "_resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz"
                },
                "path": "node_modules/fs-utils/node_modules/globby/node_modules/glob/node_modules/inherits",
                "deps": {}
              },
              "minimatch": {
                "pkg": {
                  "author": {
                    "name": "Isaac Z. Schlueter",
                    "email": "i@izs.me",
                    "url": "http://blog.izs.me"
                  },
                  "name": "minimatch",
                  "description": "a glob matcher in javascript",
                  "version": "1.0.0",
                  "repository": {
                    "type": "git",
                    "url": "git://github.com/isaacs/minimatch.git"
                  },
                  "main": "minimatch.js",
                  "scripts": {
                    "test": "tap test/*.js"
                  },
                  "engines": {
                    "node": "*"
                  },
                  "dependencies": {
                    "lru-cache": "2",
                    "sigmund": "~1.0.0"
                  },
                  "devDependencies": {
                    "tap": ""
                  },
                  "license": {
                    "type": "MIT",
                    "url": "http://github.com/isaacs/minimatch/raw/master/LICENSE"
                  },
                  "readme": "# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nEventually, it will replace the C binding in node-glob.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require(\"minimatch\")\n\nminimatch(\"bar.foo\", \"*.foo\") // true!\nminimatch(\"bar.foo\", \"*.bar\") // false!\nminimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* \"Globstar\" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n## Minimatch Class\n\nCreate a minimatch object by instanting the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require(\"minimatch\").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn't have any \"magic\" in it\n    (that is, it's something like `\"foo\"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `\"\"`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n## Functions\n\nThe top-level exported function has a `cache` property, which is an LRU\ncache set to store 100 items.  So, calling these methods repeatedly\nwith the same pattern and options will use the same Minimatch object,\nsaving the cost of parsing it multiple times.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, \"*.js\", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true}))\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable \"extglob\" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself if this option is set.  When not set, an empty list\nis returned if there are no matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than\n`\"*a?\"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n",
                  "readmeFilename": "README.md",
                  "bugs": {
                    "url": "https://github.com/isaacs/minimatch/issues"
                  },
                  "homepage": "https://github.com/isaacs/minimatch",
                  "_id": "minimatch@1.0.0",
                  "_shasum": "e0dd2120b49e1b724ce8d714c520822a9438576d",
                  "_from": "minimatch@^1.0.0",
                  "_resolved": "https://registry.npmjs.org/minimatch/-/minimatch-1.0.0.tgz"
                },
                "path": "node_modules/fs-utils/node_modules/globby/node_modules/glob/node_modules/minimatch",
                "deps": {
                  "lru-cache": {
                    "pkg": {
                      "name": "lru-cache",
                      "description": "A cache object that deletes the least-recently-used items.",
                      "version": "2.5.0",
                      "author": {
                        "name": "Isaac Z. Schlueter",
                        "email": "i@izs.me"
                      },
                      "scripts": {
                        "test": "tap test --gc"
                      },
                      "main": "lib/lru-cache.js",
                      "repository": {
                        "type": "git",
                        "url": "git://github.com/isaacs/node-lru-cache.git"
                      },
                      "devDependencies": {
                        "tap": "",
                        "weak": ""
                      },
                      "license": {
                        "type": "MIT",
                        "url": "http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"
                      },
                      "readme": "# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum size of the cache, checked by applying the length\n  function to all values in the cache.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n* `stale` By default, if you set a `maxAge`, it'll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it's\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it'll return the stale value before deleting it.  If\n  you don't set this, then it'll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the \"recently used\"-ness of the key.\n    They do what you think.\n\n* `peek(key)`\n\n    Returns the key value (or `undefined` if not found) without\n    updating the \"recently used\"-ness of the key.\n\n    (If you find yourself using this a lot, you *might* be using the\n    wrong sort of data structure, but there are some use cases where\n    it's handy.)\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n",
                      "readmeFilename": "README.md",
                      "bugs": {
                        "url": "https://github.com/isaacs/node-lru-cache/issues"
                      },
                      "homepage": "https://github.com/isaacs/node-lru-cache",
                      "_id": "lru-cache@2.5.0",
                      "_shasum": "d82388ae9c960becbea0c73bb9eb79b6c6ce9aeb",
                      "_from": "lru-cache@2",
                      "_resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz"
                    },
                    "path": "node_modules/fs-utils/node_modules/globby/node_modules/glob/node_modules/minimatch/node_modules/lru-cache",
                    "deps": {}
                  },
                  "sigmund": {
                    "pkg": {
                      "name": "sigmund",
                      "version": "1.0.0",
                      "description": "Quick and dirty signatures for Objects.",
                      "main": "sigmund.js",
                      "directories": {
                        "test": "test"
                      },
                      "dependencies": {},
                      "devDependencies": {
                        "tap": "~0.3.0"
                      },
                      "scripts": {
                        "test": "tap test/*.js",
                        "bench": "node bench.js"
                      },
                      "repository": {
                        "type": "git",
                        "url": "git://github.com/isaacs/sigmund"
                      },
                      "keywords": [
                        "object",
                        "signature",
                        "key",
                        "data",
                        "psychoanalysis"
                      ],
                      "author": {
                        "name": "Isaac Z. Schlueter",
                        "email": "i@izs.me",
                        "url": "http://blog.izs.me/"
                      },
                      "license": "BSD",
                      "readme": "# sigmund\n\nQuick and dirty signatures for Objects.\n\nThis is like a much faster `deepEquals` comparison, which returns a\nstring key suitable for caches and the like.\n\n## Usage\n\n```javascript\nfunction doSomething (someObj) {\n  var key = sigmund(someObj, maxDepth) // max depth defaults to 10\n  var cached = cache.get(key)\n  if (cached) return cached)\n\n  var result = expensiveCalculation(someObj)\n  cache.set(key, result)\n  return result\n}\n```\n\nThe resulting key will be as unique and reproducible as calling\n`JSON.stringify` or `util.inspect` on the object, but is much faster.\nIn order to achieve this speed, some differences are glossed over.\nFor example, the object `{0:'foo'}` will be treated identically to the\narray `['foo']`.\n\nAlso, just as there is no way to summon the soul from the scribblings\nof a cocain-addled psychoanalyst, there is no way to revive the object\nfrom the signature string that sigmund gives you.  In fact, it's\nbarely even readable.\n\nAs with `sys.inspect` and `JSON.stringify`, larger objects will\nproduce larger signature strings.\n\nBecause sigmund is a bit less strict than the more thorough\nalternatives, the strings will be shorter, and also there is a\nslightly higher chance for collisions.  For example, these objects\nhave the same signature:\n\n    var obj1 = {a:'b',c:/def/,g:['h','i',{j:'',k:'l'}]}\n    var obj2 = {a:'b',c:'/def/',g:['h','i','{jkl']}\n\nLike a good Freudian, sigmund is most effective when you already have\nsome understanding of what you're looking for.  It can help you help\nyourself, but you must be willing to do some work as well.\n\nCycles are handled, and cyclical objects are silently omitted (though\nthe key is included in the signature output.)\n\nThe second argument is the maximum depth, which defaults to 10,\nbecause that is the maximum object traversal depth covered by most\ninsurance carriers.\n",
                      "readmeFilename": "README.md",
                      "bugs": {
                        "url": "https://github.com/isaacs/sigmund/issues"
                      },
                      "homepage": "https://github.com/isaacs/sigmund",
                      "_id": "sigmund@1.0.0",
                      "_shasum": "66a2b3a749ae8b5fb89efd4fcc01dc94fbe02296",
                      "_from": "sigmund@~1.0.0",
                      "_resolved": "https://registry.npmjs.org/sigmund/-/sigmund-1.0.0.tgz"
                    },
                    "path": "node_modules/fs-utils/node_modules/globby/node_modules/glob/node_modules/minimatch/node_modules/sigmund",
                    "deps": {}
                  }
                }
              },
              "once": {
                "pkg": {
                  "name": "once",
                  "version": "1.3.1",
                  "description": "Run a function exactly one time",
                  "main": "once.js",
                  "directories": {
                    "test": "test"
                  },
                  "dependencies": {
                    "wrappy": "1"
                  },
                  "devDependencies": {
                    "tap": "~0.3.0"
                  },
                  "scripts": {
                    "test": "tap test/*.js"
                  },
                  "repository": {
                    "type": "git",
                    "url": "git://github.com/isaacs/once"
                  },
                  "keywords": [
                    "once",
                    "function",
                    "one",
                    "single"
                  ],
                  "author": {
                    "name": "Isaac Z. Schlueter",
                    "email": "i@izs.me",
                    "url": "http://blog.izs.me/"
                  },
                  "license": "BSD",
                  "readme": "# once\n\nOnly call a function once.\n\n## usage\n\n```javascript\nvar once = require('once')\n\nfunction load (file, cb) {\n  cb = once(cb)\n  loader.load('file')\n  loader.once('load', cb)\n  loader.once('error', cb)\n}\n```\n\nOr add to the Function.prototype in a responsible way:\n\n```javascript\n// only has to be done once\nrequire('once').proto()\n\nfunction load (file, cb) {\n  cb = cb.once()\n  loader.load('file')\n  loader.once('load', cb)\n  loader.once('error', cb)\n}\n```\n\nIronically, the prototype feature makes this module twice as\ncomplicated as necessary.\n\nTo check whether you function has been called, use `fn.called`. Once the\nfunction is called for the first time the return value of the original\nfunction is saved in `fn.value` and subsequent calls will continue to\nreturn this value.\n\n```javascript\nvar once = require('once')\n\nfunction load (cb) {\n  cb = once(cb)\n  var stream = createStream()\n  stream.once('data', cb)\n  stream.once('end', function () {\n    if (!cb.called) cb(new Error('not found'))\n  })\n}\n```\n",
                  "readmeFilename": "README.md",
                  "bugs": {
                    "url": "https://github.com/isaacs/once/issues"
                  },
                  "homepage": "https://github.com/isaacs/once",
                  "_id": "once@1.3.1",
                  "_shasum": "f3f3e4da5b7d27b5c732969ee3e67e729457b31f",
                  "_from": "once@^1.3.0",
                  "_resolved": "https://registry.npmjs.org/once/-/once-1.3.1.tgz"
                },
                "path": "node_modules/fs-utils/node_modules/globby/node_modules/glob/node_modules/once",
                "deps": {
                  "wrappy": {
                    "pkg": {
                      "name": "wrappy",
                      "version": "1.0.1",
                      "description": "Callback wrapping utility",
                      "main": "wrappy.js",
                      "directories": {
                        "test": "test"
                      },
                      "dependencies": {},
                      "devDependencies": {
                        "tap": "^0.4.12"
                      },
                      "scripts": {
                        "test": "tap test/*.js"
                      },
                      "repository": {
                        "type": "git",
                        "url": "https://github.com/npm/wrappy"
                      },
                      "author": {
                        "name": "Isaac Z. Schlueter",
                        "email": "i@izs.me",
                        "url": "http://blog.izs.me/"
                      },
                      "license": "ISC",
                      "bugs": {
                        "url": "https://github.com/npm/wrappy/issues"
                      },
                      "homepage": "https://github.com/npm/wrappy",
                      "readme": "# wrappy\n\nCallback wrapping utility\n\n## USAGE\n\n```javascript\nvar wrappy = require(\"wrappy\")\n\n// var wrapper = wrappy(wrapperFunction)\n\n// make sure a cb is called only once\n// See also: http://npm.im/once for this specific use case\nvar once = wrappy(function (cb) {\n  var called = false\n  return function () {\n    if (called) return\n    called = true\n    return cb.apply(this, arguments)\n  }\n})\n\nfunction printBoo () {\n  console.log('boo')\n}\n// has some rando property\nprintBoo.iAmBooPrinter = true\n\nvar onlyPrintOnce = once(printBoo)\n\nonlyPrintOnce() // prints 'boo'\nonlyPrintOnce() // does nothing\n\n// random property is retained!\nassert.equal(onlyPrintOnce.iAmBooPrinter, true)\n```\n",
                      "readmeFilename": "README.md",
                      "_id": "wrappy@1.0.1",
                      "_shasum": "1e65969965ccbc2db4548c6b84a6f2c5aedd4739",
                      "_from": "wrappy@1",
                      "_resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.1.tgz"
                    },
                    "path": "node_modules/fs-utils/node_modules/globby/node_modules/glob/node_modules/once/node_modules/wrappy",
                    "deps": {}
                  }
                }
              }
            }
          }
        }
      },
      "graceful-fs": {
        "pkg": {
          "author": {
            "name": "Isaac Z. Schlueter",
            "email": "i@izs.me",
            "url": "http://blog.izs.me"
          },
          "name": "graceful-fs",
          "description": "A drop-in replacement for fs, making various improvements.",
          "version": "3.0.3",
          "repository": {
            "type": "git",
            "url": "git://github.com/isaacs/node-graceful-fs.git"
          },
          "main": "graceful-fs.js",
          "engines": {
            "node": ">=0.4.0"
          },
          "directories": {
            "test": "test"
          },
          "scripts": {
            "test": "tap test/*.js"
          },
          "keywords": [
            "fs",
            "module",
            "reading",
            "retry",
            "retries",
            "queue",
            "error",
            "errors",
            "handling",
            "EMFILE",
            "EAGAIN",
            "EINVAL",
            "EPERM",
            "EACCESS"
          ],
          "license": "BSD",
          "readme": "# graceful-fs\n\ngraceful-fs functions as a drop-in replacement for the fs module,\nmaking various improvements.\n\nThe improvements are meant to normalize behavior across different\nplatforms and environments, and to make filesystem access more\nresilient to errors.\n\n## Improvements over [fs module](http://api.nodejs.org/fs.html)\n\ngraceful-fs:\n\n* Queues up `open` and `readdir` calls, and retries them once\n  something closes if there is an EMFILE error from too many file\n  descriptors.\n* fixes `lchmod` for Node versions prior to 0.6.2.\n* implements `fs.lutimes` if possible. Otherwise it becomes a noop.\n* ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or\n  `lchown` if the user isn't root.\n* makes `lchmod` and `lchown` become noops, if not available.\n* retries reading a file if `read` results in EAGAIN error.\n\nOn Windows, it retries renaming a file for up to one second if `EACCESS`\nor `EPERM` error occurs, likely because antivirus software has locked\nthe directory.\n\n## USAGE\n\n```javascript\n// use just like fs\nvar fs = require('graceful-fs')\n\n// now go and do stuff with it...\nfs.readFileSync('some-file-or-whatever')\n```\n",
          "readmeFilename": "README.md",
          "bugs": {
            "url": "https://github.com/isaacs/node-graceful-fs/issues"
          },
          "homepage": "https://github.com/isaacs/node-graceful-fs",
          "_id": "graceful-fs@3.0.3",
          "_shasum": "277141085e739ae7d54361119a62797b08a1d8c0",
          "_from": "graceful-fs@^3.0.2",
          "_resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-3.0.3.tgz"
        },
        "path": "node_modules/fs-utils/node_modules/graceful-fs",
        "deps": {}
      },
      "is-absolute": {
        "pkg": {
          "name": "is-absolute",
          "description": "Return true if a file path is absolute.",
          "version": "0.1.5",
          "homepage": "https://github.com/jonschlinkert/is-absolute",
          "author": {
            "name": "Jon Schlinkert",
            "url": "https://github.com/jonschlinkert"
          },
          "repository": {
            "type": "git",
            "url": "git://github.com/jonschlinkert/is-absolute.git"
          },
          "bugs": {
            "url": "https://github.com/jonschlinkert/is-absolute/issues"
          },
          "licenses": [
            {
              "type": "MIT",
              "url": "https://github.com/jonschlinkert/is-absolute/blob/master/LICENSE-MIT"
            }
          ],
          "keywords": [
            "absolute",
            "check",
            "file",
            "filepath",
            "is",
            "normalize",
            "path",
            "path.relative",
            "relative",
            "resolve",
            "slash",
            "slashes",
            "uri",
            "url"
          ],
          "main": "index.js",
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha -R spec"
          },
          "devDependencies": {
            "chai": "^1.9.1",
            "mocha": "*",
            "verb": ">= 0.2.6",
            "verb-tag-jscomments": ">= 0.2.0"
          },
          "dependencies": {
            "is-relative": "^0.1.0"
          },
          "readme": "# is-absolute [![NPM version](https://badge.fury.io/js/is-absolute.png)](http://badge.fury.io/js/is-absolute)\n\n> Return true if a file path is absolute.\n\nBased on the `isAbsolute` utility method in [express](https://github.com/visionmedia/express).\n\n## Install\nInstall with [npm](npmjs.org):\n\n```bash\nnpm i is-absolute --save-dev\n```\n\n## Usage\n\n```js\nvar isAbsolute = require('is-absolute');\nconsole.log(isAbsolute('abc'));\n//=> ['a', 'b', 'c'];\n```\n\n## API\n\n**Example:**\n\n```js\nisAbsolute('a/b/c.js');\n//=> 'false'\n\nisAbsolute('C://a/b/c.js');\n//=> 'true'\n```\n\n* `filepath` {String}  \n* `return` {Boolean}\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on July 06, 2014._",
          "readmeFilename": "README.md",
          "_id": "is-absolute@0.1.5",
          "_shasum": "9d92cd8cba14c27a960b18c69cba1bec895f88c7",
          "_from": "is-absolute@^0.1.5"
        },
        "path": "node_modules/fs-utils/node_modules/is-absolute",
        "deps": {
          "is-relative": {
            "pkg": {
              "name": "is-relative",
              "description": "Returns `true` if the path appears to be relative.",
              "version": "0.1.1",
              "homepage": "https://github.com/jonschlinkert/is-relative",
              "author": {
                "name": "Jon Schlinkert",
                "url": "https://github.com/jonschlinkert"
              },
              "repository": {
                "type": "git",
                "url": "git://github.com/jonschlinkert/is-relative.git"
              },
              "bugs": {
                "url": "https://github.com/jonschlinkert/is-relative/issues"
              },
              "licenses": [
                {
                  "type": "MIT",
                  "url": "https://github.com/jonschlinkert/is-relative/blob/master/LICENSE-MIT"
                }
              ],
              "keywords": [
                "absolute",
                "check",
                "file",
                "filepath",
                "is",
                "normalize",
                "path",
                "path.relative",
                "relative",
                "resolve",
                "slash",
                "slashes",
                "uri",
                "url"
              ],
              "main": "index.js",
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha -R spec"
              },
              "devDependencies": {
                "mocha": "*",
                "verb": ">= 0.2.6",
                "verb-tag-jscomments": "^0.1.4"
              },
              "readme": "# is-relative [![NPM version](https://badge.fury.io/js/is-relative.png)](http://badge.fury.io/js/is-relative)\n\n> Returns `true` if the path appears to be relative.\n\n## Install\nInstall with [npm](npmjs.org):\n\n```bash\nnpm i is-relative --save-dev\n```\n\n## Usage\n**Example**:\n\n```js\nvar isRelative = require('is-relative');\nisRelative('test/fixtures/docs/new/file.txt');\n//=> true\n```\n\n* `filepath` {String}: Path to test.  \n* `return` {Boolean}\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on July 06, 2014._",
              "readmeFilename": "README.md",
              "_id": "is-relative@0.1.1",
              "_shasum": "32f0c780ed3373fb3c72999d7db4c06cefe2d75a",
              "_from": "is-relative@^0.1.0",
              "_resolved": "https://registry.npmjs.org/is-relative/-/is-relative-0.1.1.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/is-absolute/node_modules/is-relative",
            "deps": {}
          }
        }
      },
      "js-yaml": {
        "pkg": {
          "name": "js-yaml",
          "version": "3.2.2",
          "description": "YAML 1.2 parser and serializer",
          "keywords": [
            "yaml",
            "parser",
            "serializer",
            "pyyaml"
          ],
          "homepage": "https://github.com/nodeca/js-yaml",
          "author": {
            "name": "Dervus Grim",
            "email": "dervus.grim@gmail.com"
          },
          "contributors": [
            {
              "name": "Aleksey V Zapparov",
              "email": "ixti@member.fsf.org",
              "url": "http://www.ixti.net/"
            },
            {
              "name": "Vitaly Puzrin",
              "email": "vitaly@rcdesign.ru",
              "url": "https://github.com/puzrin"
            },
            {
              "name": "Martin Grenfell",
              "email": "martin.grenfell@gmail.com",
              "url": "http://got-ravings.blogspot.com"
            }
          ],
          "bugs": {
            "url": "https://github.com/nodeca/js-yaml/issues"
          },
          "license": {
            "type": "MIT",
            "url": "https://github.com/nodeca/js-yaml/blob/master/LICENSE"
          },
          "repository": {
            "type": "git",
            "url": "git://github.com/nodeca/js-yaml.git"
          },
          "main": "./index.js",
          "bin": {
            "js-yaml": "bin/js-yaml.js"
          },
          "dependencies": {
            "argparse": "~ 0.1.11",
            "esprima": "~ 1.0.2"
          },
          "devDependencies": {
            "ansi": "*",
            "benchmark": "*",
            "mocha": "*"
          },
          "browser": {
            "buffer": false
          },
          "readme": "JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://travis-ci.org/nodeca/js-yaml.svg?branch=master)](https://travis-ci.org/nodeca/js-yaml)\n[![NPM version](https://img.shields.io/npm/v/js-yaml.svg)](https://www.npmjs.org/package/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install -g js-yaml\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<!-- esprima required only for !!js/function -->\n<script src=\"esprima.js\"></script>\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\nNotes:\n\n1. We have no resourses to support browserified version. Don't expect it to be\n   well tested. Don't expect fast fixes if something goes wrong there.\n2. `!!js/function` in browser bundle will not work by default. If you really need\n   it - load `esprima` parser first (via amd or directly).\n3. `!!bin` in browser will return `Array`, because browsers do not support\n   node.js `Buffer` and adding Buffer shims is completely useless on practice.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\n``` javascript\nyaml = require('js-yaml');\nfs   = require('fs');\n\n// Get document, or throw exception on error\ntry {\n  var doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `onWarning` _(default: null)_ - function to call on warning messages.\n  Loader will throw on warnings if this function is not provided.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, JSON schema is not as strict as defined in the YAML specification.\nIt allows numbers in any notaion, use `Null` and `NULL` as `null`, etc.\nCore schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources you\nmust additionally validate object structure, to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `safeLoad()`, but understands multi-document sources and apply\n`iterator` to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow exception if you try to dump regexps or functions. However, you can\ndisable exceptions by `skipInvalid` option.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 2.x.x -> 3.x.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes and not loaded yaml\nfiles via `require()` - no changes needed. Just upgrade library.\n\nIn other case, you should:\n\n1. Replace all occurences of `require('xxxx.yml')` by `fs.readFileSync()` +\n  `yaml.safeLoad()`.\n2. rewrite your custom tags constructors and custom loader\n  classes, to conform new API. See\n  [examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n  [wiki](https://github.com/nodeca/js-yaml/wiki) for details.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n",
          "readmeFilename": "README.md",
          "_id": "js-yaml@3.2.2",
          "_shasum": "a34e77fe8d5e10270e225d21d07790fa17fd2927",
          "_from": "js-yaml@^3.2.2",
          "_resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.2.2.tgz"
        },
        "path": "node_modules/fs-utils/node_modules/js-yaml",
        "deps": {
          "argparse": {
            "pkg": {
              "name": "argparse",
              "description": "Very powerful CLI arguments parser. Native port of argparse - python's options parsing library",
              "version": "0.1.15",
              "keywords": [
                "cli",
                "parser",
                "argparse",
                "option",
                "args"
              ],
              "homepage": "https://github.com/nodeca/argparse",
              "contributors": [
                {
                  "name": "Eugene Shkuropat"
                },
                {
                  "name": "Paul Jacobson"
                }
              ],
              "bugs": {
                "url": "https://github.com/nodeca/argparse/issues"
              },
              "license": {
                "type": "MIT",
                "url": "https://github.com/nodeca/argparse/blob/master/LICENSE"
              },
              "repository": {
                "type": "git",
                "url": "git://github.com/nodeca/argparse.git"
              },
              "main": "./index.js",
              "scripts": {
                "test": "make test"
              },
              "dependencies": {
                "underscore": "~1.4.3",
                "underscore.string": "~2.3.1"
              },
              "devDependencies": {
                "mocha": "*"
              },
              "engines": {
                "node": ">= 0.6.0"
              },
              "readme": "argparse\n========\n\n[![Build Status](https://secure.travis-ci.org/nodeca/argparse.png?branch=master)](http://travis-ci.org/nodeca/argparse)\n\nCLI arguments parser for node.js. Javascript port of python's\n[argparse](http://docs.python.org/dev/library/argparse.html) module\n(original version 3.2). That's a full port, except some very rare options,\nrecorded in issue tracker.\n\n**NB.** Method names changed to camelCase. See [generated docs](http://nodeca.github.com/argparse/).\n\n\nExample\n=======\n\ntest.js file:\n\n```javascript\n#!/usr/bin/env node\n'use strict';\n\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\nvar parser = new ArgumentParser({\n  version: '0.0.1',\n  addHelp:true,\n  description: 'Argparse example'\n});\nparser.addArgument(\n  [ '-f', '--foo' ],\n  {\n    help: 'foo bar'\n  }\n);\nparser.addArgument(\n  [ '-b', '--bar' ],\n  {\n    help: 'bar foo'\n  }\n);\nvar args = parser.parseArgs();\nconsole.dir(args);\n```\n\nDisplay help:\n\n```\n$ ./test.js -h\nusage: example.js [-h] [-v] [-f FOO] [-b BAR]\n\nArgparse example\n\nOptional arguments:\n  -h, --help         Show this help message and exit.\n  -v, --version      Show program's version number and exit.\n  -f FOO, --foo FOO  foo bar\n  -b BAR, --bar BAR  bar foo\n```\n\nParse arguments:\n\n```\n$ ./test.js -f=3 --bar=4\n{ foo: '3', bar: '4' }\n```\n\nMore [examples](https://github.com/nodeca/argparse/tree/master/examples).\n\n\nArgumentParser objects\n======================\n\n```\nnew ArgumentParser({paramters hash});\n```\n\nCreates a new ArgumentParser object.\n\n**Supported params:**\n\n- ```description``` - Text to display before the argument help.\n- ```epilog``` - Text to display after the argument help.\n- ```addHelp``` - Add a -h/–help option to the parser. (default: True)\n- ```argumentDefault``` - Set the global default value for arguments. (default: None)\n- ```parents``` - A list of ArgumentParser objects whose arguments should also be included.\n- ```prefixChars``` - The set of characters that prefix optional arguments. (default: ‘-‘)\n- ```formatterClass``` - A class for customizing the help output.\n- ```prog``` - The name of the program (default: sys.argv[0])\n- ```usage``` - The string describing the program usage (default: generated)\n- ```conflictHandler``` - Usually unnecessary, defines strategy for resolving conflicting optionals.\n\n**Not supportied yet**\n\n- ```fromfilePrefixChars``` - The set of characters that prefix files from which additional arguments should be read.\n\n\nDetails in [original ArgumentParser guide](http://docs.python.org/dev/library/argparse.html#argumentparser-objects)\n\n\naddArgument() method\n====================\n\n```\nArgumentParser.addArgument([names or flags], {options})\n```\n\nDefines how a single command-line argument should be parsed.\n\n- ```name or flags``` - Either a name or a list of option strings, e.g. foo or -f, --foo.\n\nOptions:\n\n- ```action``` - The basic type of action to be taken when this argument is encountered at the command line.\n- ```nargs```- The number of command-line arguments that should be consumed.\n- ```constant``` - A constant value required by some action and nargs selections.\n- ```defaultValue``` - The value produced if the argument is absent from the command line.\n- ```type``` - The type to which the command-line argument should be converted.\n- ```choices``` - A container of the allowable values for the argument.\n- ```required``` - Whether or not the command-line option may be omitted (optionals only).\n- ```help``` - A brief description of what the argument does.\n- ```metavar``` - A name for the argument in usage messages.\n- ```dest``` - The name of the attribute to be added to the object returned by parseArgs().\n\nDetails in [original add_argument guide](http://docs.python.org/dev/library/argparse.html#the-add-argument-method)\n\n\nAction (some details)\n================\n\nArgumentParser objects associate command-line arguments with actions.\nThese actions can do just about anything with the command-line arguments associated\nwith them, though most actions simply add an attribute to the object returned by\nparseArgs(). The action keyword argument specifies how the command-line arguments\nshould be handled. The supported actions are:\n\n- ```store``` - Just stores the argument’s value. This is the default action.\n- ```storeConst``` - Stores value, specified by the const keyword argument.\n  (Note that the const keyword argument defaults to the rather unhelpful None.)\n  The 'storeConst' action is most commonly used with optional arguments, that\n  specify some sort of flag.\n- ```storeTrue``` and ```storeFalse``` - Stores values True and False\n  respectively. These are special cases of 'storeConst'.\n- ```append``` - Stores a list, and appends each argument value to the list.\n  This is useful to allow an option to be specified multiple times.\n- ```appendConst``` - Stores a list, and appends value, specified by the\n  const keyword argument to the list. (Note, that the const keyword argument defaults\n  is None.) The 'appendConst' action is typically used when multiple arguments need\n  to store constants to the same list.\n- ```count``` - Counts the number of times a keyword argument occurs. For example,\n  used for increasing verbosity levels.\n- ```help``` - Prints a complete help message for all the options in the current\n  parser and then exits. By default a help action is automatically added to the parser.\n  See ArgumentParser for details of how the output is created.\n- ```version``` - Prints version information and exit. Expects a `version=`\n  keyword argument in the addArgument() call.\n\nDetails in [original action guide](http://docs.python.org/dev/library/argparse.html#action)\n\n\nSub-commands\n============\n\nArgumentParser.addSubparsers()\n\nMany programs split their functionality into a number of sub-commands, for\nexample, the svn program can invoke sub-commands like `svn checkout`, `svn update`,\nand `svn commit`. Splitting up functionality this way can be a particularly good\nidea when a program performs several different functions which require different\nkinds of command-line arguments. `ArgumentParser` supports creation of such\nsub-commands with `addSubparsers()` method. The `addSubparsers()` method is\nnormally called with no arguments and returns an special action object.\nThis object has a single method `addParser()`, which takes a command name and\nany `ArgumentParser` constructor arguments, and returns an `ArgumentParser` object\nthat can be modified as usual.\n\nExample:\n\nsub_commands.js\n```javascript\n#!/usr/bin/env node\n'use strict';\n\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\nvar parser = new ArgumentParser({\n  version: '0.0.1',\n  addHelp:true,\n  description: 'Argparse examples: sub-commands',\n});\n\nvar subparsers = parser.addSubparsers({\n  title:'subcommands',\n  dest:\"subcommand_name\"\n});\n\nvar bar = subparsers.addParser('c1', {addHelp:true});\nbar.addArgument(\n  [ '-f', '--foo' ],\n  {\n    action: 'store',\n    help: 'foo3 bar3'\n  }\n);\nvar bar = subparsers.addParser(\n  'c2',\n  {aliases:['co'], addHelp:true}\n);\nbar.addArgument(\n  [ '-b', '--bar' ],\n  {\n    action: 'store',\n    type: 'int',\n    help: 'foo3 bar3'\n  }\n);\n\nvar args = parser.parseArgs();\nconsole.dir(args);\n\n```\n\nDetails in [original sub-commands guide](http://docs.python.org/dev/library/argparse.html#sub-commands)\n\n\nContributors\n============\n\n- [Eugene Shkuropat](https://github.com/shkuropat)\n- [Paul Jacobson](https://github.com/hpaulj)\n\n[others](https://github.com/nodeca/argparse/graphs/contributors)\n\nLicense\n=======\n\nCopyright (c) 2012 [Vitaly Puzrin](https://github.com/puzrin).\nReleased under the MIT license. See\n[LICENSE](https://github.com/nodeca/argparse/blob/master/LICENSE) for details.\n\n\n",
              "readmeFilename": "README.md",
              "_id": "argparse@0.1.15",
              "_shasum": "28a1f72c43113e763220e5708414301c8840f0a1",
              "_from": "argparse@~ 0.1.11",
              "_resolved": "https://registry.npmjs.org/argparse/-/argparse-0.1.15.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/js-yaml/node_modules/argparse",
            "deps": {
              "underscore": {
                "pkg": {
                  "name": "underscore",
                  "description": "JavaScript's functional programming helper library.",
                  "homepage": "http://underscorejs.org",
                  "keywords": [
                    "util",
                    "functional",
                    "server",
                    "client",
                    "browser"
                  ],
                  "author": {
                    "name": "Jeremy Ashkenas",
                    "email": "jeremy@documentcloud.org"
                  },
                  "repository": {
                    "type": "git",
                    "url": "git://github.com/documentcloud/underscore.git"
                  },
                  "main": "underscore.js",
                  "version": "1.4.4",
                  "devDependencies": {
                    "phantomjs": "0.2.2"
                  },
                  "scripts": {
                    "test": "phantomjs test/vendor/runner.js test/index.html?noglobals=true"
                  },
                  "readme": "                       __\n                      /\\ \\                                                         __\n     __  __    ___    \\_\\ \\     __   _ __   ____    ___    ___   _ __    __       /\\_\\    ____\n    /\\ \\/\\ \\ /' _ `\\  /'_  \\  /'__`\\/\\  __\\/ ,__\\  / ___\\ / __`\\/\\  __\\/'__`\\     \\/\\ \\  /',__\\\n    \\ \\ \\_\\ \\/\\ \\/\\ \\/\\ \\ \\ \\/\\  __/\\ \\ \\//\\__, `\\/\\ \\__//\\ \\ \\ \\ \\ \\//\\  __/  __  \\ \\ \\/\\__, `\\\n     \\ \\____/\\ \\_\\ \\_\\ \\___,_\\ \\____\\\\ \\_\\\\/\\____/\\ \\____\\ \\____/\\ \\_\\\\ \\____\\/\\_\\ _\\ \\ \\/\\____/\n      \\/___/  \\/_/\\/_/\\/__,_ /\\/____/ \\/_/ \\/___/  \\/____/\\/___/  \\/_/ \\/____/\\/_//\\ \\_\\ \\/___/\n                                                                                  \\ \\____/\n                                                                                   \\/___/\n\nUnderscore.js is a utility-belt library for JavaScript that provides\nsupport for the usual functional suspects (each, map, reduce, filter...)\nwithout extending any core JavaScript objects.\n\nFor Docs, License, Tests, and pre-packed downloads, see:\nhttp://underscorejs.org\n\nMany thanks to our contributors:\nhttps://github.com/documentcloud/underscore/contributors\n",
                  "readmeFilename": "README.md",
                  "bugs": {
                    "url": "https://github.com/documentcloud/underscore/issues"
                  },
                  "_id": "underscore@1.4.4",
                  "_shasum": "61a6a32010622afa07963bf325203cf12239d604",
                  "_from": "underscore@~1.4.3",
                  "_resolved": "https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz"
                },
                "path": "node_modules/fs-utils/node_modules/js-yaml/node_modules/argparse/node_modules/underscore",
                "deps": {}
              },
              "underscore.string": {
                "pkg": {
                  "name": "underscore.string",
                  "version": "2.3.3",
                  "description": "String manipulation extensions for Underscore.js javascript library.",
                  "homepage": "http://epeli.github.com/underscore.string/",
                  "contributors": [
                    {
                      "name": "Esa-Matti Suuronen",
                      "email": "esa-matti@suuronen.org",
                      "url": "http://esa-matti.suuronen.org/"
                    },
                    {
                      "name": "Edward Tsech",
                      "email": "edtsech@gmail.com"
                    },
                    {
                      "name": "Pavel Pravosud",
                      "email": "pavel@pravosud.com",
                      "url": "<https://github.com/rwz>"
                    },
                    {
                      "name": "Sasha Koss",
                      "email": "kossnocorp@gmail.com",
                      "url": "http://koss.nocorp.me/"
                    },
                    {
                      "name": "Vladimir Dronnikov",
                      "email": "dronnikov@gmail.com"
                    },
                    {
                      "name": "Pete Kruckenberg",
                      "email": "https://github.com/kruckenb",
                      "url": "<https://github.com/kruckenb>"
                    },
                    {
                      "name": "Paul Chavard",
                      "email": "paul@chavard.net",
                      "url": "<http://tchak.net>"
                    },
                    {
                      "name": "Ed Finkler",
                      "email": "coj@funkatron.com",
                      "url": "<http://funkatron.com>"
                    }
                  ],
                  "keywords": [
                    "underscore",
                    "string"
                  ],
                  "main": "./lib/underscore.string",
                  "directories": {
                    "lib": "./lib"
                  },
                  "engines": {
                    "node": "*"
                  },
                  "repository": {
                    "type": "git",
                    "url": "https://github.com/epeli/underscore.string.git"
                  },
                  "bugs": {
                    "url": "https://github.com/epeli/underscore.string/issues"
                  },
                  "licenses": [
                    {
                      "type": "MIT"
                    }
                  ],
                  "readme": "# Underscore.string [![Build Status](https://secure.travis-ci.org/epeli/underscore.string.png?branch=master)](http://travis-ci.org/epeli/underscore.string) #\n\n\n\nJavascript lacks complete string manipulation operations.\nThis an attempt to fill that gap. List of build-in methods can be found\nfor example from [Dive Into JavaScript][d].\n\n[d]: http://www.diveintojavascript.com/core-javascript-reference/the-string-object\n\n\nAs name states this an extension for [Underscore.js][u], but it can be used\nindependently from **_s**-global variable. But with Underscore.js you can\nuse Object-Oriented style and chaining:\n\n[u]: http://documentcloud.github.com/underscore/\n\n```javascript\n_(\"   epeli  \").chain().trim().capitalize().value()\n=> \"Epeli\"\n```\n\n## Download ##\n\n  * [Development version](https://raw.github.com/epeli/underscore.string/master/lib/underscore.string.js) *Uncompressed with Comments 18kb*\n  * [Production version](https://github.com/epeli/underscore.string/raw/master/dist/underscore.string.min.js) *Minified 7kb*\n\n\n## Node.js installation ##\n\n**npm package**\n\n    npm install underscore.string\n\n**Standalone usage**:\n\n```javascript\nvar _s = require('underscore.string');\n```\n\n**Integrate with Underscore.js**:\n\n```javascript\nvar _  = require('underscore');\n\n// Import Underscore.string to separate object, because there are conflict functions (include, reverse, contains)\n_.str = require('underscore.string');\n\n// Mix in non-conflict functions to Underscore namespace if you want\n_.mixin(_.str.exports());\n\n// All functions, include conflict, will be available through _.str object\n_.str.include('Underscore.string', 'string'); // => true\n```\n\n**Or Integrate with Underscore.js without module loading**\n\nRun the following expression after Underscore.js and Underscore.string are loaded\n```javascript\n// _.str becomes a global variable if no module loading is detected\n// Mix in non-conflict functions to Underscore namespace\n_.mixin(_.str.exports());\n```\n\n## String Functions ##\n\nFor availability of functions in this way you need to mix in Underscore.string functions:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\notherwise functions from examples will be available through _.string or _.str objects:\n\n```javascript\n_.str.capitalize('epeli')\n=> \"Epeli\"\n```\n\n**numberFormat** _.numberFormat(number, [ decimals=0, decimalSeparator='.', orderSeparator=','])\n\nFormats the numbers.\n\n```javascript\n_.numberFormat(1000, 2)\n=> \"1,000.00\"\n\n_.numberFormat(123456789.123, 5, '.', ',')\n=> \"123,456,789.12300\"\n```\n\n\n**levenshtein** _.levenshtein(string1, string2)\n\nCalculates [Levenshtein distance][ld] between two strings.\n[ld]: http://en.wikipedia.org/wiki/Levenshtein_distance\n\n```javascript\n_.levenshtein('kitten', 'kittah')\n=> 2\n```\n\n**capitalize** _.capitalize(string)\n\nConverts first letter of the string to uppercase.\n\n```javascript\n_.capitalize(\"foo Bar\")\n=> \"Foo Bar\"\n```\n\n**chop** _.chop(string, step)\n\n```javascript\n_.chop('whitespace', 3)\n=> ['whi','tes','pac','e']\n```\n\n**clean** _.clean(str)\n\nCompress some whitespaces to one.\n\n```javascript\n_.clean(\" foo    bar   \")\n=> 'foo bar'\n```\n\n**chars** _.chars(str)\n\n```javascript\n_.chars('Hello')\n=> ['H','e','l','l','o']\n```\n\n**swapCase** _.swapCase(str)\n\nReturns a copy of the string in which all the case-based characters have had their case swapped.\n\n```javascript\n_.swapCase('hELLO')\n=> 'Hello'\n```\n\n**include** available only through _.str object, because Underscore has function with the same name.\n\n```javascript\n_.str.include(\"foobar\", \"ob\")\n=> true\n```\n\n(removed) **includes** _.includes(string, substring)\n\nTests if string contains a substring.\n\n```javascript\n_.includes(\"foobar\", \"ob\")\n=> true\n```\n\n**includes** function was removed\n\nBut you can create it in this way, for compatibility with previous versions:\n\n```javascript\n_.includes = _.str.include\n```\n\n**count** _.count(string, substring)\n\n```javascript\n_('Hello world').count('l')\n=> 3\n```\n\n**escapeHTML** _.escapeHTML(string)\n\nConverts HTML special characters to their entity equivalents.\n\n```javascript\n_('<div>Blah blah blah</div>').escapeHTML();\n=> '&lt;div&gt;Blah blah blah&lt;/div&gt;'\n```\n\n**unescapeHTML** _.unescapeHTML(string)\n\nConverts entity characters to HTML equivalents.\n\n```javascript\n_('&lt;div&gt;Blah blah blah&lt;/div&gt;').unescapeHTML();\n=> '<div>Blah blah blah</div>'\n```\n\n**insert** _.insert(string, index, substing)\n\n```javascript\n_('Hello ').insert(6, 'world')\n=> 'Hello world'\n```\n\n**isBlank** _.isBlank(string)\n\n```javascript\n_('').isBlank(); // => true\n_('\\n').isBlank(); // => true\n_(' ').isBlank(); // => true\n_('a').isBlank(); // => false\n```\n\n**join** _.join(separator, *strings)\n\nJoins strings together with given separator\n\n```javascript\n_.join(\" \", \"foo\", \"bar\")\n=> \"foo bar\"\n```\n\n**lines** _.lines(str)\n\n```javascript\n_.lines(\"Hello\\nWorld\")\n=> [\"Hello\", \"World\"]\n```\n\n**reverse** available only through _.str object, because Underscore has function with the same name.\n\nReturn reversed string:\n\n```javascript\n_.str.reverse(\"foobar\")\n=> 'raboof'\n```\n\n**splice**  _.splice(string, index, howmany, substring)\n\nLike a array splice.\n\n```javascript\n_('https://edtsech@bitbucket.org/edtsech/underscore.strings').splice(30, 7, 'epeli')\n=> 'https://edtsech@bitbucket.org/epeli/underscore.strings'\n```\n\n**startsWith** _.startsWith(string, starts)\n\nThis method checks whether string starts with starts.\n\n```javascript\n_(\"image.gif\").startsWith(\"image\")\n=> true\n```\n\n**endsWith** _.endsWith(string, ends)\n\nThis method checks whether string ends with ends.\n\n```javascript\n_(\"image.gif\").endsWith(\"gif\")\n=> true\n```\n\n**succ**  _.succ(str)\n\nReturns the successor to str.\n\n```javascript\n_('a').succ()\n=> 'b'\n\n_('A').succ()\n=> 'B'\n```\n\n**supplant**\n\nSupplant function was removed, use Underscore.js [template function][p].\n\n[p]: http://documentcloud.github.com/underscore/#template\n\n**strip** alias for *trim*\n\n**lstrip** alias for *ltrim*\n\n**rstrip** alias for *rtrim*\n\n**titleize** _.titleize(string)\n\n```javascript\n_('my name is epeli').titleize()\n=> 'My Name Is Epeli'\n```\n\n**camelize** _.camelize(string)\n\nConverts underscored or dasherized string to a camelized one\n\n```javascript\n_('-moz-transform').camelize()\n=> 'MozTransform'\n```\n\n**classify** _.classify(string)\n\nConverts string to camelized class name\n\n```javascript\n_('some_class_name').classify()\n=> 'SomeClassName'\n```\n\n**underscored** _.underscored(string)\n\nConverts a camelized or dasherized string into an underscored one\n\n```javascript\n_('MozTransform').underscored()\n=> 'moz_transform'\n```\n\n**dasherize** _.dasherize(string)\n\nConverts a underscored or camelized string into an dasherized one\n\n```javascript\n_('MozTransform').dasherize()\n=> '-moz-transform'\n```\n\n**humanize** _.humanize(string)\n\nConverts an underscored, camelized, or dasherized string into a humanized one.\nAlso removes beginning and ending whitespace, and removes the postfix '_id'.\n\n```javascript\n_('  capitalize dash-CamelCase_underscore trim  ').humanize()\n=> 'Capitalize dash camel case underscore trim'\n```\n\n**trim** _.trim(string, [characters])\n\ntrims defined characters from begining and ending of the string.\nDefaults to whitespace characters.\n\n```javascript\n_.trim(\"  foobar   \")\n=> \"foobar\"\n\n_.trim(\"_-foobar-_\", \"_-\")\n=> \"foobar\"\n```\n\n\n**ltrim** _.ltrim(string, [characters])\n\nLeft trim. Similar to trim, but only for left side.\n\n\n**rtrim** _.rtrim(string, [characters])\n\nRight trim. Similar to trim, but only for right side.\n\n**truncate** _.truncate(string, length, truncateString)\n\n```javascript\n_('Hello world').truncate(5)\n=> 'Hello...'\n\n_('Hello').truncate(10)\n=> 'Hello'\n```\n\n**prune** _.prune(string, length, pruneString)\n\nElegant version of truncate.\nMakes sure the pruned string does not exceed the original length.\nAvoid half-chopped words when truncating.\n\n```javascript\n_('Hello, world').prune(5)\n=> 'Hello...'\n\n_('Hello, world').prune(8)\n=> 'Hello...'\n\n_('Hello, world').prune(5, ' (read a lot more)')\n=> 'Hello, world' (as adding \"(read a lot more)\" would be longer than the original string)\n\n_('Hello, cruel world').prune(15)\n=> 'Hello, cruel...'\n\n_('Hello').prune(10)\n=> 'Hello'\n```\n\n**words** _.words(str, delimiter=/\\s+/)\n\nSplit string by delimiter (String or RegExp), /\\s+/ by default.\n\n```javascript\n_.words(\"   I   love   you   \")\n=> [\"I\",\"love\",\"you\"]\n\n_.words(\"I_love_you\", \"_\")\n=> [\"I\",\"love\",\"you\"]\n\n_.words(\"I-love-you\", /-/)\n=> [\"I\",\"love\",\"you\"]\n\n_.words(\"   \")\n=> []\n```\n\n**sprintf** _.sprintf(string format, *arguments)\n\nC like string formatting.\nCredits goes to [Alexandru Marasteanu][o].\nFor more detailed documentation, see the [original page][o].\n\n[o]: http://www.diveintojavascript.com/projects/sprintf-for-javascript\n\n```javascript\n_.sprintf(\"%.1f\", 1.17)\n\"1.2\"\n```\n\n**pad** _.pad(str, length, [padStr, type])\n\npads the `str` with characters until the total string length is equal to the passed `length` parameter. By default, pads on the **left** with the space char (`\" \"`). `padStr` is truncated to a single character if necessary.\n\n```javascript\n_.pad(\"1\", 8)\n-> \"       1\";\n\n_.pad(\"1\", 8, '0')\n-> \"00000001\";\n\n_.pad(\"1\", 8, '0', 'right')\n-> \"10000000\";\n\n_.pad(\"1\", 8, '0', 'both')\n-> \"00001000\";\n\n_.pad(\"1\", 8, 'bleepblorp', 'both')\n-> \"bbbb1bbb\";\n```\n\n**lpad** _.lpad(str, length, [padStr])\n\nleft-pad a string. Alias for `pad(str, length, padStr, 'left')`\n\n```javascript\n_.lpad(\"1\", 8, '0')\n-> \"00000001\";\n```\n\n**rpad** _.rpad(str, length, [padStr])\n\nright-pad a string. Alias for `pad(str, length, padStr, 'right')`\n\n```javascript\n_.rpad(\"1\", 8, '0')\n-> \"10000000\";\n```\n\n**lrpad** _.lrpad(str, length, [padStr])\n\nleft/right-pad a string. Alias for `pad(str, length, padStr, 'both')`\n\n```javascript\n_.lrpad(\"1\", 8, '0')\n-> \"00001000\";\n```\n\n**center** alias for **lrpad**\n\n**ljust** alias for *rpad*\n\n**rjust** alias for *lpad*\n\n**toNumber**  _.toNumber(string, [decimals])\n\nParse string to number. Returns NaN if string can't be parsed to number.\n\n```javascript\n_('2.556').toNumber()\n=> 3\n\n_('2.556').toNumber(1)\n=> 2.6\n```\n\n**strRight**  _.strRight(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_('This_is_a_test_string').strRight('_')\n=> \"is_a_test_string\";\n```\n\n**strRightBack**  _.strRightBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_('This_is_a_test_string').strRightBack('_')\n=> \"string\";\n```\n\n**strLeft**  _.strLeft(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_('This_is_a_test_string').strLeft('_')\n=> \"This\";\n```\n\n**strLeftBack**  _.strLeftBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_('This_is_a_test_string').strLeftBack('_')\n=> \"This_is_a_test\";\n```\n\n**stripTags**\n\nRemoves all html tags from string.\n\n```javascript\n_('a <a href=\"#\">link</a>').stripTags()\n=> 'a link'\n\n_('a <a href=\"#\">link</a><script>alert(\"hello world!\")</script>').stripTags()\n=> 'a linkalert(\"hello world!\")'\n```\n\n**toSentence**  _.toSentence(array, [delimiter, lastDelimiter])\n\nJoin an array into a human readable sentence.\n\n```javascript\n_.toSentence(['jQuery', 'Mootools', 'Prototype'])\n=> 'jQuery, Mootools and Prototype';\n\n_.toSentence(['jQuery', 'Mootools', 'Prototype'], ', ', ' unt ')\n=> 'jQuery, Mootools unt Prototype';\n```\n\n**toSentenceSerial**  _.toSentenceSerial(array, [delimiter, lastDelimiter])\n\nThe same as `toSentence`, but adjusts delimeters to use [Serial comma](http://en.wikipedia.org/wiki/Serial_comma).\n\n```javascript\n_.toSentenceSerial(['jQuery', 'Mootools'])\n=> 'jQuery and Mootools';\n\n_.toSentenceSerial(['jQuery', 'Mootools', 'Prototype'])\n=> 'jQuery, Mootools, and Prototype'\n\n_.toSentenceSerial(['jQuery', 'Mootools', 'Prototype'], ', ', ' unt ');\n=> 'jQuery, Mootools, unt Prototype';\n```\n\n**repeat** _.repeat(string, count, [separator])\n\nRepeats a string count times.\n\n```javascript\n_.repeat(\"foo\", 3)\n=> 'foofoofoo';\n\n_.repeat(\"foo\", 3, \"bar\")\n=> 'foobarfoobarfoo'\n```\n\n**surround** _.surround(string, wrap)\n\nSurround a string with another string.\n\n```javascript\n_.surround(\"foo\", \"ab\")\n=> 'abfooab';\n```\n\n**quote** _.quote(string, quoteChar) or _.q(string, quoteChar)\n\nQuotes a string. `quoteChar` defaults to `\"`.\n\n```javascript\n_.quote('foo', quoteChar)\n=> '\"foo\"';\n```\n**unquote** _.unquote(string, quoteChar)\n\nUnquotes a string. `quoteChar` defaults to `\"`.\n\n```javascript\n_.unquote('\"foo\"')\n=> 'foo';\n_.unquote(\"'foo'\", \"'\")\n=> 'foo';\n```\n\n\n**slugify** _.slugify(string)\n\nTransform text into a URL slug. Replaces whitespaces, accentuated, and special characters with a dash.\n\n```javascript\n_.slugify(\"Un éléphant à l'orée du bois\")\n=> 'un-elephant-a-loree-du-bois';\n```\n\n***Caution: this function is charset dependent***\n\n**naturalCmp** array.sort(_.naturalCmp)\n\nNaturally sort strings like humans would do.\n\n```javascript\n['foo20', 'foo5'].sort(_.naturalCmp)\n=> [ 'foo5', 'foo20' ]\n```\n\n**toBoolean** _.toBoolean(string) or _.toBool(string)\n\nTurn strings that can be commonly considered as booleas to real booleans. Such as \"true\", \"false\", \"1\" and \"0\". This function is case insensitive.\n\n```javascript\n_.toBoolean(\"true\")\n=> true\n_.toBoolean(\"FALSE\")\n=> false\n_.toBoolean(\"random\")\n=> undefined\n```\n\nIt can be customized by giving arrays of truth and falsy value matcher as parameters. Matchers can be also RegExp objects.\n\n```javascript\n_.toBoolean(\"truthy\", [\"truthy\"], [\"falsy\"])\n=> true\n_.toBoolean(\"true only at start\", [/^true/])\n=> true\n```\n\n## Roadmap ##\n\nAny suggestions or bug reports are welcome. Just email me or more preferably open an issue.\n\n#### Problems\n\nWe lose two things for `include` and `reverse` methods from `_.string`:\n\n* Calls like `_('foobar').include('bar')` aren't available;\n* Chaining isn't available too.\n\nBut if you need this functionality you can create aliases for conflict functions which will be convenient for you:\n\n```javascript\n_.mixin({\n    includeString: _.str.include,\n    reverseString: _.str.reverse\n})\n\n// Now wrapper calls and chaining are available.\n_('foobar').chain().reverseString().includeString('rab').value()\n```\n\n#### Standalone Usage\n\nIf you are using Underscore.string without Underscore. You also have `_.string` namespace for it and `_.str` alias\nBut of course you can just reassign `_` variable with `_.string`\n\n```javascript\n_ = _.string\n```\n\n## Changelog ##\n\n### 2.3.3 ###\n\n* Add `toBoolean`\n* Add `unquote`\n* Add quote char option to `quote`\n* Support dash-separated words in `titleize`\n\n### 2.3.2 ###\n\n* Add `naturalCmp`\n* Bug fix to `camelize`\n* Add ă, ș, ț and ś to `slugify`\n* Doc updates\n* Add support for [component](http://component.io/)\n* [Full changelog](https://github.com/epeli/underscore.string/compare/v2.3.1...v2.3.2)\n\n### 2.3.1 ###\n\n* Bug fixes to `escapeHTML`, `classify`, `substr`\n* Faster `count`\n* Documentation fixes\n* [Full changelog](https://github.com/epeli/underscore.string/compare/v2.3.0...v2.3.1)\n\n### 2.3.0 ###\n\n* Added `numberformat` method\n* Added `levenshtein` method (Levenshtein distance calculation)\n* Added `swapCase` method\n* Changed default behavior of `words` method\n* Added `toSentenceSerial` method\n* Added `surround` and `quote` methods\n\n### 2.2.1 ###\n\n* Same as 2.2.0 (2.2.0rc on npm) to fix some npm drama\n\n### 2.2.0 ###\n\n* Capitalize method behavior changed\n* Various perfomance tweaks\n\n### 2.1.1###\n\n* Fixed words method bug\n* Added classify method\n\n### 2.1.0 ###\n\n* AMD support\n* Added toSentence method\n* Added slugify method\n* Lots of speed optimizations\n\n### 2.0.0 ###\n\n* Added prune, humanize functions\n* Added _.string (_.str) namespace for Underscore.string library\n* Removed includes function\n\nFor upgrading to this version you need to mix in Underscore.string library to Underscore object:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\nand all non-conflict Underscore.string functions will be available through Underscore object.\nAlso function `includes` has been removed, you should replace this function by `_.str.include`\nor create alias `_.includes = _.str.include` and all your code will work fine.\n\n### 1.1.6 ###\n\n* Fixed reverse and truncate\n* Added isBlank, stripTags, inlude(alias for includes)\n* Added uglifier compression\n\n### 1.1.5 ###\n\n* Added strRight, strRightBack, strLeft, strLeftBack\n\n### 1.1.4 ###\n\n* Added pad, lpad, rpad, lrpad methods and aliases center, ljust, rjust\n* Integration with Underscore 1.1.6\n\n### 1.1.3 ###\n\n* Added methods: underscored, camelize, dasherize\n* Support newer version of npm\n\n### 1.1.2 ###\n\n* Created functions: lines, chars, words functions\n\n### 1.0.2 ###\n\n* Created integration test suite with underscore.js 1.1.4 (now it's absolutely compatible)\n* Removed 'reverse' function, because this function override underscore.js 'reverse'\n\n## Contribute ##\n\n* Fork & pull request. Don't forget about tests.\n* If you planning add some feature please create issue before.\n\nOtherwise changes will be rejected.\n\n## Contributors list ##\n[Can be found here](https://github.com/epeli/underscore.string/graphs/contributors).\n\n\n## Licence ##\n\nThe MIT License\n\nCopyright (c) 2011 Esa-Matti Suuronen esa-matti@suuronen.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
                  "readmeFilename": "README.markdown",
                  "_id": "underscore.string@2.3.3",
                  "_shasum": "71c08bf6b428b1133f37e78fa3a21c82f7329b0d",
                  "_from": "underscore.string@~2.3.1",
                  "_resolved": "https://registry.npmjs.org/underscore.string/-/underscore.string-2.3.3.tgz",
                  "scripts": {}
                },
                "path": "node_modules/fs-utils/node_modules/js-yaml/node_modules/argparse/node_modules/underscore.string",
                "deps": {}
              }
            }
          },
          "esprima": {
            "pkg": {
              "name": "esprima",
              "description": "ECMAScript parsing infrastructure for multipurpose analysis",
              "homepage": "http://esprima.org",
              "main": "esprima.js",
              "bin": {
                "esparse": "./bin/esparse.js",
                "esvalidate": "./bin/esvalidate.js"
              },
              "files": [
                "bin",
                "test/run.js",
                "test/runner.js",
                "test/test.js",
                "test/compat.js",
                "test/reflect.js",
                "esprima.js"
              ],
              "version": "1.0.4",
              "engines": {
                "node": ">=0.4.0"
              },
              "maintainers": [
                {
                  "name": "Ariya Hidayat",
                  "email": "ariya.hidayat@gmail.com",
                  "url": "http://ariya.ofilabs.com"
                }
              ],
              "repository": {
                "type": "git",
                "url": "http://github.com/ariya/esprima.git"
              },
              "licenses": [
                {
                  "type": "BSD",
                  "url": "http://github.com/ariya/esprima/raw/master/LICENSE.BSD"
                }
              ],
              "keywords": [
                "ast",
                "ecmascript",
                "javascript",
                "parser",
                "syntax"
              ],
              "scripts": {
                "test": "node test/run.js",
                "benchmark": "node test/benchmarks.js",
                "benchmark-quick": "node test/benchmarks.js quick"
              },
              "readme": "**Esprima** ([esprima.org](http://esprima.org)) is a high performance,\nstandard-compliant [ECMAScript](http://www.ecma-international.org/publications/standards/Ecma-262.htm)\nparser written in ECMAScript (also popularly known as\n[JavaScript](http://en.wikipedia.org/wiki/JavaScript>JavaScript)).\nEsprima is created and maintained by [Ariya Hidayat](http://twitter.com/ariyahidayat),\nwith the help of [many contributors](https://github.com/ariya/esprima/contributors).\n\nEsprima runs on web browsers (IE 6+, Firefox 1+, Safari 3+, Chrome 1+, Konqueror 4.6+, Opera 8+) as well as\n[Node.js](http://nodejs.org).\n\n### Features\n\n- Full support for [ECMAScript 5.1](http://www.ecma-international.org/publications/standards/Ecma-262.htm)(ECMA-262)\n- Sensible [syntax tree format](http://esprima.org/doc/index.html#ast) compatible with Mozilla\n[Parser AST](https://developer.mozilla.org/en/SpiderMonkey/Parser_API)\n- Heavily tested (> 550 [unit tests](http://esprima.org/test/) with solid 100% statement coverage)\n- Optional tracking of syntax node location (index-based and line-column)\n- Experimental support for ES6/Harmony (module, class, destructuring, ...)\n\nEsprima is blazing fast (see the [benchmark suite](http://esprima.org/test/benchmarks.html)).\nIt is up to 3x faster than UglifyJS v1 and it is still [competitive](http://esprima.org/test/compare.html)\nwith the new generation of fast parsers.\n\n### Applications\n\nEsprima serves as the basis for many popular JavaScript development tools:\n\n- Code coverage analysis: [node-cover](https://github.com/itay/node-cover), [Istanbul](https://github.com/yahoo/Istanbul)\n- Documentation tool: [JFDoc](https://github.com/thejohnfreeman/jfdoc), [JSDuck](https://github.com/senchalabs/jsduck)\n- Language extension: [LLJS](http://mbebenita.github.com/LLJS/) (low-level JS),\n[Sweet.js](http://sweetjs.org/) (macro)\n- ES6/Harmony transpiler: [Six](https://github.com/matthewrobb/six), [Harmonizr](https://github.com/jdiamond/harmonizr)\n- Eclipse Orion smart editing ([outline view](https://github.com/aclement/esprima-outline), [content assist](http://contraptionsforprogramming.blogspot.com/2012/02/better-javascript-content-assist-in.html))\n- Source code modification: [Esmorph](https://github.com/ariya/esmorph), [Code Painter](https://github.com/fawek/codepainter),\n- Source transformation: [node-falafel](https://github.com/substack/node-falafel), [Esmangle](https://github.com/Constellation/esmangle), [escodegen](https://github.com/Constellation/escodegen)\n\n### Questions?\n- [Documentation](http://esprima.org/doc)\n- [Issue tracker](http://issues.esprima.org): [known problems](http://code.google.com/p/esprima/issues/list?q=Defect)\nand [future plans](http://code.google.com/p/esprima/issues/list?q=Enhancement)\n- [Mailing list](http://groups.google.com/group/esprima)\n- [Contribution guide](http://esprima.org/doc/index.html#contribution)\n\nFollow [@Esprima](http://twitter.com/Esprima) on Twitter to get the\ndevelopment updates.\nFeedback and contribution are welcomed!\n\n### License\n\nCopyright (C) 2012, 2011 [Ariya Hidayat](http://ariya.ofilabs.com/about)\n and other contributors.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n",
              "readmeFilename": "README.md",
              "bugs": {
                "url": "https://github.com/ariya/esprima/issues"
              },
              "_id": "esprima@1.0.4",
              "_shasum": "9f557e08fc3b4d26ece9dd34f8fbf476b62585ad",
              "_from": "esprima@~ 1.0.2",
              "_resolved": "https://registry.npmjs.org/esprima/-/esprima-1.0.4.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/js-yaml/node_modules/esprima",
            "deps": {}
          }
        }
      },
      "kind-of": {
        "pkg": {
          "name": "kind-of",
          "description": "Get the native type of a value.",
          "version": "0.1.0",
          "homepage": "https://github.com/jonschlinkert/kind-of",
          "author": {
            "name": "Jon Schlinkert",
            "url": "https://github.com/jonschlinkert"
          },
          "repository": {
            "type": "git",
            "url": "git://github.com/jonschlinkert/kind-of.git"
          },
          "bugs": {
            "url": "https://github.com/jonschlinkert/kind-of/issues"
          },
          "licenses": [
            {
              "type": "MIT",
              "url": "https://github.com/jonschlinkert/kind-of/blob/master/LICENSE-MIT"
            }
          ],
          "main": "index.js",
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha -R spec"
          },
          "devDependencies": {
            "mocha": "*",
            "should": "^4.0.4",
            "verb": ">= 0.2.6"
          },
          "keywords": [
            "arguments",
            "array",
            "boolean",
            "date",
            "function",
            "javascript",
            "js",
            "kind",
            "kind-of",
            "node",
            "node.js",
            "null",
            "number",
            "object",
            "regexp",
            "string",
            "type",
            "type-of",
            "typeof",
            "types",
            "undefined",
            "util",
            "utilities",
            "utility",
            "utils"
          ],
          "readme": "# kind-of [![NPM version](https://badge.fury.io/js/kind-of.svg)](http://badge.fury.io/js/kind-of)\n\n\n> Get the native type of a value.\n\n## Install\n#### Install with [npm](npmjs.org):\n\n```bash\nnpm i kind-of --save-dev\n```\n\n## Run tests\n\n```bash\nnpm test\n```\n\n## Usage\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Boolean(true));\n//=> 'boolean'\n\nkindOf(42);\n//=> 'number'\n\nkindOf(new Number(42));\n//=> 'number'\n\nkindOf(\"string\");\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([]);\n//=> 'array'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(new Array());\n//=> 'array'\n\nkindOf(/[\\s\\S]+/);\n//=> 'regexp'\n\nkindOf(new RegExp('^' + 'foo$'));\n//=> 'regexp'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(new Function());\n//=> 'function'\n```\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on September 26, 2014._",
          "readmeFilename": "README.md",
          "_id": "kind-of@0.1.0",
          "_shasum": "bfeec69c1bf15bb2995cb07af8e58ee36ff37c12",
          "_from": "kind-of@^0.1.0"
        },
        "path": "node_modules/fs-utils/node_modules/kind-of",
        "deps": {}
      },
      "relative": {
        "pkg": {
          "name": "relative",
          "version": "0.1.6",
          "description": "Get the relative filepath from path A to path B. Calculates from file-to-directory, file-to-file, directory-to-file, and directory-to-directory.",
          "author": {
            "name": "Jon Schlinkert",
            "url": "https://github.com/jonschlinkert"
          },
          "repository": {
            "type": "git",
            "url": "https://github.com/jonschlinkert/relative.git"
          },
          "bugs": {
            "url": "https://github.com/jonschlinkert/relative/issues"
          },
          "licenses": [
            {
              "type": "MIT",
              "url": "https://github.com/jonschlinkert/relative/blob/master/LICENSE-MIT"
            }
          ],
          "main": "index.js",
          "scripts": {
            "test": "mocha -R spec"
          },
          "engines": {
            "node": ">= 0.8.0"
          },
          "devDependencies": {
            "chai": "~1.9.0",
            "mocha": "~1.17.1",
            "verb-tag-jscomments": "^0.1.4"
          },
          "keywords": [
            "absolute",
            "check",
            "file",
            "filepath",
            "is",
            "normalize",
            "path",
            "path.relative",
            "relative",
            "resolve",
            "slash",
            "slashes",
            "uri",
            "url"
          ],
          "dependencies": {
            "normalize-path": "^0.1.1"
          },
          "readme": "# relative [![NPM version](https://badge.fury.io/js/relative.png)](http://badge.fury.io/js/relative)\n\n> Get the relative filepath from path A to path B. Calculates from file-to-directory, file-to-file, directory-to-file, and directory-to-directory.\n\n**Calculates correctly from:**\n\n* File to directory\n* File to file\n* Directory to file\n* Directory to directory\n\n\n## Install\nInstall with [npm](npmjs.org):\n\n```bash\nnpm i relative --save-dev\n```\n\n## Usage\n\n```js\nvar relative = require('relative');\nrelative(from, to);\n\n// Example\nrelative('test/fixtures/foo.txt', 'docs');\n// => '../../docs'\n```\n\n## API\n### relative\n\nReturn the relative path from `a` to `b`.\n\n**Example**:\n\n```js\nvar relative = require('relative');\nrelative('test/fixtures/foo.txt', 'docs/new/file.txt');\n//=> '../../docs/new/file.txt'\n```\n\n* `from` {String} \n* `to` {String}  \n* `return` {String} \n\n\n### .toBase\n\nGet the path relative to the given base path.\n\n**Example**:\n\n```js\nrelative.toBase('test/fixtures', 'test/fixtures/docs/new/file.txt');\n//=> 'docs/new/file.txt'\n```\n\n* `basepath` {String}: The base directory \n* `filepath` {String}: The full filepath  \n* `return` {String}            The relative path\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on July 06, 2014._",
          "readmeFilename": "README.md",
          "homepage": "https://github.com/jonschlinkert/relative",
          "_id": "relative@0.1.6",
          "_shasum": "adc35dee5b8d3af5242bb2e6889cbcfe7a99886c",
          "_from": "relative@^0.1.6",
          "_resolved": "https://registry.npmjs.org/relative/-/relative-0.1.6.tgz"
        },
        "path": "node_modules/fs-utils/node_modules/relative",
        "deps": {
          "normalize-path": {
            "pkg": {
              "name": "normalize-path",
              "description": "Normalize file path slashes to be unix-like forward slashes, regardless of OS (since in reality Windows doesn't care about slash direction anyway). Also condenses repeat slashes to a single slash and removes and trailing slashes.",
              "version": "0.1.1",
              "homepage": "https://github.com/jonschlinkert/normalize-path",
              "author": {
                "name": "Jon Schlinkert",
                "url": "https://github.com/jonschlinkert"
              },
              "repository": {
                "type": "git",
                "url": "git://github.com/jonschlinkert/normalize-path.git"
              },
              "bugs": {
                "url": "https://github.com/jonschlinkert/normalize-path/issues"
              },
              "licenses": [
                {
                  "type": "MIT",
                  "url": "https://github.com/jonschlinkert/normalize-path/blob/master/LICENSE-MIT"
                }
              ],
              "keywords": [
                "normalize",
                "path",
                "filepath",
                "slash",
                "slashes"
              ],
              "main": "index.js",
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha -R spec"
              },
              "devDependencies": {
                "verb": "~0.2.6",
                "chai": "~1.9.1",
                "mocha": "*"
              },
              "readme": "# normalize-path [![NPM version](https://badge.fury.io/js/normalize-path.png)](http://badge.fury.io/js/normalize-path)\n\n> Normalize file path slashes to be unix-like forward slashes, regardless of OS (since in reality Windows doesn't care about slash direction anyway). Also condenses repeat slashes to a single slash and removes and trailing slashes.\n\n## Install\nInstall with [npm](npmjs.org):\n\n```bash\nnpm i normalize-path --save-dev\n```\n\n## Usage\n\n```js\nvar normalize = require('normalize-path');\nconsole.log(normalize('\\\\foo\\\\bar\\\\baz\\\\'));\n//=> '//foo/bar/baz'\n```\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on June 25, 2014._",
              "readmeFilename": "README.md",
              "_id": "normalize-path@0.1.1",
              "_shasum": "6c701248fdb9896d1fee1aa6620da77feed4d367",
              "_from": "normalize-path@^0.1.1",
              "_resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-0.1.1.tgz"
            },
            "path": "node_modules/fs-utils/node_modules/relative/node_modules/normalize-path",
            "deps": {}
          }
        }
      }
    }
  },
  "lodash": {
    "pkg": {
      "name": "lodash",
      "version": "2.4.1",
      "description": "A utility library delivering consistency, customization, performance, & extras.",
      "homepage": "http://lodash.com/",
      "license": "MIT",
      "main": "dist/lodash.js",
      "keywords": [
        "amd",
        "browser",
        "client",
        "customize",
        "functional",
        "server",
        "util"
      ],
      "author": {
        "name": "John-David Dalton",
        "email": "john.david.dalton@gmail.com",
        "url": "http://allyoucanleet.com/"
      },
      "contributors": [
        {
          "name": "John-David Dalton",
          "email": "john.david.dalton@gmail.com",
          "url": "http://allyoucanleet.com/"
        },
        {
          "name": "Blaine Bublitz",
          "email": "blaine@iceddev.com",
          "url": "http://www.iceddev.com/"
        },
        {
          "name": "Kit Cambridge",
          "email": "github@kitcambridge.be",
          "url": "http://kitcambridge.be/"
        },
        {
          "name": "Mathias Bynens",
          "email": "mathias@qiwi.be",
          "url": "http://mathiasbynens.be/"
        }
      ],
      "bugs": {
        "url": "https://github.com/lodash/lodash/issues"
      },
      "repository": {
        "type": "git",
        "url": "https://github.com/lodash/lodash.git"
      },
      "engines": [
        "node",
        "rhino"
      ],
      "files": [
        "LICENSE.txt",
        "lodash.js",
        "dist/lodash.js",
        "dist/lodash.min.js",
        "dist/lodash.compat.js",
        "dist/lodash.compat.min.js",
        "dist/lodash.underscore.js",
        "dist/lodash.underscore.min.js"
      ],
      "jam": {
        "main": "dist/lodash.compat.js",
        "include": [
          "LICENSE.txt",
          "dist/lodash.js",
          "dist/lodash.min.js",
          "dist/lodash.compat.js",
          "dist/lodash.compat.min.js",
          "dist/lodash.underscore.js",
          "dist/lodash.underscore.min.js"
        ]
      },
      "volo": {
        "type": "directory",
        "ignore": [
          ".*",
          "*.custom.*",
          "*.min.*",
          "*.template.*",
          "*.map",
          "*.md",
          "lodash.js",
          "index.js",
          "bower.json",
          "component.json",
          "doc",
          "modularize",
          "node_modules",
          "perf",
          "test",
          "vendor"
        ]
      },
      "readme": "# Lo-Dash v2.4.1\nA utility library delivering consistency, [customization](http://lodash.com/custom-builds), [performance](http://lodash.com/benchmarks), & [extras](http://lodash.com/#features).\n\n## Download\n\nCheck out our [wiki]([https://github.com/lodash/lodash/wiki/build-differences]) for details over the differences between builds.\n\n* Modern builds perfect for newer browsers/environments:<br>\n[Development](https://raw.github.com/lodash/lodash/2.4.1/dist/lodash.js) &\n[Production](https://raw.github.com/lodash/lodash/2.4.1/dist/lodash.min.js)\n\n* Compatibility builds for older environment support too:<br>\n[Development](https://raw.github.com/lodash/lodash/2.4.1/dist/lodash.compat.js) &\n[Production](https://raw.github.com/lodash/lodash/2.4.1/dist/lodash.compat.min.js)\n\n* Underscore builds to use as a drop-in replacement:<br>\n[Development](https://raw.github.com/lodash/lodash/2.4.1/dist/lodash.underscore.js) &\n[Production](https://raw.github.com/lodash/lodash/2.4.1/dist/lodash.underscore.min.js)\n\nCDN copies are available on [cdnjs](http://cdnjs.com/libraries/lodash.js/) & [jsDelivr](http://www.jsdelivr.com/#!lodash). For smaller file sizes, create [custom builds](http://lodash.com/custom-builds) with only the features needed.\n\nLove modules? We’ve got you covered with [lodash-amd](https://npmjs.org/package/lodash-amd), [lodash-es6](https://github.com/lodash/lodash-es6), [lodash-node](https://npmjs.org/package/lodash-node), & [npm packages](https://npmjs.org/browse/keyword/lodash-modularized) per method.\n\n## Dive in\n\nThere’s plenty of **[documentation](http://lodash.com/docs)**, [unit tests](http://lodash.com/tests), & [benchmarks](http://lodash.com/benchmarks).<br>\nCheck out <a href=\"http://devdocs.io/lodash/\">DevDocs</a> as a fast, organized, & searchable interface for our documentation.\n\nThe full changelog for this release is available on our [wiki](https://github.com/lodash/lodash/wiki/Changelog).<br>\nA list of upcoming features is available on our [roadmap](https://github.com/lodash/lodash/wiki/Roadmap).\n\n## Features *not* in Underscore\n\n * AMD loader support ([curl](https://github.com/cujojs/curl), [dojo](http://dojotoolkit.org/), [requirejs](http://requirejs.org/), etc.)\n * [_(…)](http://lodash.com/docs#_) supports intuitive chaining\n * [_.at](http://lodash.com/docs#at) for cherry-picking collection values\n * [_.bindKey](http://lodash.com/docs#bindKey) for binding [*“lazy”*](http://michaux.ca/articles/lazy-function-definition-pattern) defined methods\n * [_.clone](http://lodash.com/docs#clone) supports shallow cloning of `Date` & `RegExp` objects\n * [_.cloneDeep](http://lodash.com/docs#cloneDeep) for deep cloning arrays & objects\n * [_.constant](http://lodash.com/docs#constant) & [_.property](http://lodash.com/docs#property) function generators for composing functions\n * [_.contains](http://lodash.com/docs#contains) accepts a `fromIndex`\n * [_.create](http://lodash.com/docs#create) for easier object inheritance\n * [_.createCallback](http://lodash.com/docs#createCallback) for extending callbacks in methods & mixins\n * [_.curry](http://lodash.com/docs#curry) for creating [curried](http://hughfdjackson.com/javascript/2013/07/06/why-curry-helps/) functions\n * [_.debounce](http://lodash.com/docs#debounce) & [_.throttle](http://lodash.com/docs#throttle) accept additional `options` for more control\n * [_.findIndex](http://lodash.com/docs#findIndex) & [_.findKey](http://lodash.com/docs#findKey) for finding indexes & keys\n * [_.forEach](http://lodash.com/docs#forEach) is chainable & supports exiting early\n * [_.forIn](http://lodash.com/docs#forIn) for iterating own & inherited properties\n * [_.forOwn](http://lodash.com/docs#forOwn) for iterating own properties\n * [_.isPlainObject](http://lodash.com/docs#isPlainObject) for checking if values are created by `Object`\n * [_.mapValues](http://lodash.com/docs#mapValues) for [mapping](http://lodash.com/docs#map) values to an object\n * [_.memoize](http://lodash.com/docs#memoize) exposes the `cache` of memoized functions\n * [_.merge](http://lodash.com/docs#merge) for a deep [_.extend](http://lodash.com/docs#extend)\n * [_.noop](http://lodash.com/docs#noop) for function placeholders\n * [_.now](http://lodash.com/docs#now) as a cross-browser `Date.now` alternative\n * [_.parseInt](http://lodash.com/docs#parseInt) for consistent behavior\n * [_.pull](http://lodash.com/docs#pull) & [_.remove](http://lodash.com/docs#remove) for mutating arrays\n * [_.random](http://lodash.com/docs#random) supports returning floating-point numbers\n * [_.runInContext](http://lodash.com/docs#runInContext) for easier mocking\n * [_.sortBy](http://lodash.com/docs#sortBy) supports sorting by multiple properties\n * [_.support](http://lodash.com/docs#support) for flagging environment features\n * [_.template](http://lodash.com/docs#template) supports [*“imports”*](http://lodash.com/docs#templateSettings_imports) options & [ES6 template delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals)\n * [_.transform](http://lodash.com/docs#transform) as a powerful alternative to [_.reduce](http://lodash.com/docs#reduce) for transforming objects\n * [_.where](http://lodash.com/docs#where) supports deep object comparisons\n * [_.xor](http://lodash.com/docs#xor) as a companion to [_.difference](http://lodash.com/docs#difference), [_.intersection](http://lodash.com/docs#intersection), & [_.union](http://lodash.com/docs#union)\n * [_.zip](http://lodash.com/docs#zip) is capable of unzipping values\n * [_.omit](http://lodash.com/docs#omit), [_.pick](http://lodash.com/docs#pick), &\n   [more](http://lodash.com/docs \"_.assign, _.clone, _.cloneDeep, _.first, _.initial, _.isEqual, _.last, _.merge, _.rest\") accept callbacks\n * [_.contains](http://lodash.com/docs#contains), [_.toArray](http://lodash.com/docs#toArray), &\n   [more](http://lodash.com/docs \"_.at, _.countBy, _.every, _.filter, _.find, _.forEach, _.forEachRight, _.groupBy, _.invoke, _.map, _.max, _.min, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.size, _.some, _.sortBy, _.where\") accept strings\n * [_.filter](http://lodash.com/docs#filter), [_.map](http://lodash.com/docs#map), &\n   [more](http://lodash.com/docs \"_.countBy, _.every, _.find, _.findKey, _.findLast, _.findLastIndex, _.findLastKey, _.first, _.groupBy, _.initial, _.last, _.max, _.min, _.reject, _.rest, _.some, _.sortBy, _.sortedIndex, _.uniq\") support *“_.pluck”* & *“_.where”* shorthands\n * [_.findLast](http://lodash.com/docs#findLast), [_.findLastIndex](http://lodash.com/docs#findLastIndex), &\n   [more](http://lodash.com/docs \"_.findLastKey, _.forEachRight, _.forInRight, _.forOwnRight, _.partialRight\") right-associative methods\n\n## Resources\n\n * Podcasts\n  - [JavaScript Jabber](http://javascriptjabber.com/079-jsj-lo-dash-with-john-david-dalton/)\n\n * Posts\n  - [Say “Hello” to Lo-Dash](http://kitcambridge.be/blog/say-hello-to-lo-dash/)\n  - [Custom builds in Lo-Dash 2.0](http://kitcambridge.be/blog/custom-builds-in-lo-dash-2-dot-0/)\n\n * Videos\n  - [Introduction](https://vimeo.com/44154599)\n  - [Origins](https://vimeo.com/44154600)\n  - [Optimizations & builds](https://vimeo.com/44154601)\n  - [Native method use](https://vimeo.com/48576012)\n  - [Testing](https://vimeo.com/45865290)\n  - [CascadiaJS ’12](http://www.youtube.com/watch?v=dpPy4f_SeEk)\n\n A list of other community created podcasts, posts, & videos is available on our [wiki](https://github.com/lodash/lodash/wiki/Resources).\n\n## Support\n\nTested in Chrome 5~31, Firefox 2~25, IE 6-11, Opera 9.25~17, Safari 3-7, Node.js 0.6.21~0.10.22, Narwhal 0.3.2, PhantomJS 1.9.2, RingoJS 0.9, & Rhino 1.7RC5.<br>\nAutomated browser test results [are available](https://saucelabs.com/u/lodash) as well as [Travis CI](https://travis-ci.org/) builds for [lodash](https://travis-ci.org/lodash/lodash/), [lodash-cli](https://travis-ci.org/lodash/lodash-cli/), [lodash-amd](https://travis-ci.org/lodash/lodash-amd/), [lodash-node](https://travis-ci.org/lodash/lodash-node/), & [grunt-lodash](https://travis-ci.org/lodash/grunt-lodash).\n\nSpecial thanks to [Sauce Labs](https://saucelabs.com/) for providing automated browser testing.<br>\n[![Sauce Labs](http://lodash.com/_img/sauce.png)](https://saucelabs.com/ \"Sauce Labs: Selenium Testing & More\")\n\n## Installation & usage\n\nIn browsers:\n\n```html\n<script src=\"lodash.js\"></script>\n```\n\nUsing [`npm`](http://npmjs.org/):\n\n```bash\nnpm i --save lodash\n\n{sudo} npm i -g lodash\nnpm ln lodash\n```\n\nIn [Node.js](http://nodejs.org/) & [Ringo](http://ringojs.org/):\n\n```js\nvar _ = require('lodash');\n// or as Underscore\nvar _ = require('lodash/dist/lodash.underscore');\n```\n\n**Notes:**\n * Don’t assign values to [special variable](http://nodejs.org/api/repl.html#repl_repl_features) `_` when in the REPL\n * If Lo-Dash is installed globally, run [`npm ln lodash`](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/) in your project’s root directory *before* requiring it\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('lodash.js');\n```\n\nIn an AMD loader:\n\n```js\nrequire({\n  'packages': [\n    { 'name': 'lodash', 'location': 'path/to/lodash', 'main': 'lodash' }\n  ]\n},\n['lodash'], function(_) {\n  console.log(_.VERSION);\n});\n```\n\n## Author\n\n| [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](https://twitter.com/jdalton \"Follow @jdalton on Twitter\") |\n|---|\n| [John-David Dalton](http://allyoucanleet.com/) |\n\n## Contributors\n\n| [![twitter/blainebublitz](http://gravatar.com/avatar/ac1c67fd906c9fecd823ce302283b4c1?s=70)](https://twitter.com/blainebublitz \"Follow @BlaineBublitz on Twitter\") | [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge \"Follow @kitcambridge on Twitter\") | [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|---|---|\n| [Blaine Bublitz](http://www.iceddev.com/) | [Kit Cambridge](http://kitcambridge.be/) | [Mathias Bynens](http://mathiasbynens.be/) |\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/lodash/lodash/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n",
      "readmeFilename": "README.md",
      "_id": "lodash@2.4.1",
      "_shasum": "5b7723034dda4d262e5a46fb2c58d7cc22f71420",
      "_from": "lodash@^2.4.1",
      "_resolved": "https://registry.npmjs.org/lodash/-/lodash-2.4.1.tgz",
      "scripts": {}
    },
    "path": "node_modules/lodash",
    "deps": {}
  },
  "object.reduce": {
    "pkg": {
      "name": "object.reduce",
      "description": "Reduces an object to a value that is the accumulated result of running each property in the object through a callback. Executes the callback function once for each own enumerable property in the object, receiving four arguments: the initial value (or value from the previous callback call), the `value` of the current property, the `key` of the current property, and the `object` over which the function is iterating. Node.js/JavaScript utility.",
      "version": "0.1.3",
      "homepage": "https://github.com/jonschlinkert/object.reduce",
      "author": {
        "name": "Jon Schlinkert",
        "url": "https://github.com/jonschlinkert"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/jonschlinkert/object.reduce.git"
      },
      "bugs": {
        "url": "https://github.com/jonschlinkert/object.reduce/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "https://github.com/jonschlinkert/object.reduce/blob/master/LICENSE-MIT"
        }
      ],
      "main": "index.js",
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "mocha -R spec"
      },
      "dependencies": {
        "for-own": "^0.1.2"
      },
      "devDependencies": {
        "mocha": "*",
        "should": "^4.0.4",
        "verb": ">= 0.2.6"
      },
      "keywords": [
        "accumulate",
        "accumulator",
        "callback",
        "cb",
        "find",
        "for-in",
        "for-own",
        "has",
        "has-own",
        "hasOwn",
        "index",
        "iterate",
        "iterator",
        "javascript",
        "js",
        "key",
        "keys",
        "loop",
        "node.js",
        "object",
        "own",
        "prop",
        "properties",
        "property",
        "reduce",
        "util",
        "utilities",
        "utility",
        "utils",
        "value"
      ],
      "readme": "# object.reduce [![NPM version](https://badge.fury.io/js/object.reduce.svg)](http://badge.fury.io/js/object.reduce)\n\n\n> Reduces an object to a value that is the accumulated result of running each property in the object through a callback. Executes the callback function once for each own enumerable property in the object, receiving four arguments: the initial value (or value from the previous callback call), the `value` of the current property, the `key` of the current property, and the `object` over which the function is iterating. Node.js/JavaScript utility.\n\n## Install\n#### Install with [npm](npmjs.org)\n\n```bash\nnpm i object.reduce --save\n```\n#### Install with [bower](https://github.com/bower/bower)\n\n```bash\nbower install object.reduce --save\n```\n\n## Run tests\n\n```bash\nnpm test\n```\n\n## Usage\n\nA callback function is executed once for each own enumerable property in the object, receiving four arguments:\n\n  - `acc`: the initial value (or value from the previous callback call),\n  - `value`: the of the current property,\n  - `key`: the of the current property, and\n  - the original `object` over which the function is iterating.\n\n**Example**\n\n```js\nvar reduce = require('reduce-object');\nvar a = {a: 'foo', b: 'bar', c: 'baz'};\n\nreduce(a, function (acc, value, key, obj) {\n  acc[key] = value.toUpperCase();\n  return acc;\n}, {});\n\n//=> {a: 'FOO', b: 'BAR', c: 'BAZ'};\n```\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 07, 2014._",
      "readmeFilename": "README.md",
      "_id": "object.reduce@0.1.3",
      "_shasum": "996b5d9fd3ee07e9313774ae2feebbf8095f7273",
      "_from": "object.reduce@"
    },
    "path": "node_modules/object.reduce",
    "deps": {
      "for-own": {
        "pkg": {
          "name": "for-own",
          "description": "Iterate over the own enumerable properties of an object, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`. JavaScript/Node.js.",
          "version": "0.1.2",
          "homepage": "https://github.com/jonschlinkert/for-own",
          "author": {
            "name": "Jon Schlinkert",
            "url": "https://github.com/jonschlinkert"
          },
          "repository": {
            "type": "git",
            "url": "git://github.com/jonschlinkert/for-own.git"
          },
          "bugs": {
            "url": "https://github.com/jonschlinkert/for-own/issues"
          },
          "licenses": [
            {
              "type": "MIT",
              "url": "https://github.com/jonschlinkert/for-own/blob/master/LICENSE-MIT"
            }
          ],
          "main": "index.js",
          "engines": {
            "node": ">=0.10.0"
          },
          "scripts": {
            "test": "mocha -R spec"
          },
          "dependencies": {
            "for-in": "^0.1.1"
          },
          "devDependencies": {
            "mocha": "*",
            "should": "^4.0.4",
            "verb": ">= 0.2.6"
          },
          "keywords": [
            "find",
            "for-in",
            "for-own",
            "has",
            "has-own",
            "hasOwn",
            "javascript",
            "js",
            "key",
            "keys",
            "loop",
            "node.js",
            "object",
            "own",
            "properties",
            "property",
            "util",
            "utilities",
            "utility",
            "utils",
            "value"
          ],
          "readme": "# for-own [![NPM version](https://badge.fury.io/js/for-own.svg)](http://badge.fury.io/js/for-own)\n\n> Iterate over the own and inherited enumerable properties of an object, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`.\n\n## Install\n#### Install with [npm](npmjs.org):\n\n```bash\nnpm i for-own --save\n```\n\n## Run tests\n\n```bash\nnpm test\n```\n\n## Usage\n\n```js\nvar forOwn = require('for-own');\n\nvar obj = {a: 'foo', b: 'bar', c: 'baz'};\nvar values = [];\nvar keys = [];\n\nforOwn(obj, function (value, key, o) {\n  keys.push(key);\n  values.push(value);\n});\n\nconsole.log(keys);\n//=> ['a', 'b', 'c'];\n\nconsole.log(values);\n//=> ['foo', 'bar', 'baz'];\n```\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.\nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on September 20, 2014._",
          "readmeFilename": "README.md",
          "_id": "for-own@0.1.2",
          "_shasum": "4fd2266efd46705b7bbdfc38ac4b6f8cef24ce3b",
          "_from": "for-own@^0.1.2"
        },
        "path": "node_modules/object.reduce/node_modules/for-own",
        "deps": {
          "for-in": {
            "pkg": {
              "name": "for-in",
              "description": "Iterate over the own and inherited enumerable properties of an objecte, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`. JavaScript/Node.js",
              "version": "0.1.3",
              "homepage": "https://github.com/jonschlinkert/for-in",
              "author": {
                "name": "Jon Schlinkert",
                "url": "https://github.com/jonschlinkert"
              },
              "repository": {
                "type": "git",
                "url": "git://github.com/jonschlinkert/for-in.git"
              },
              "bugs": {
                "url": "https://github.com/jonschlinkert/for-in/issues"
              },
              "licenses": [
                {
                  "type": "MIT",
                  "url": "https://github.com/jonschlinkert/for-in/blob/master/LICENSE-MIT"
                }
              ],
              "main": "index.js",
              "engines": {
                "node": ">=0.10.0"
              },
              "scripts": {
                "test": "mocha -R spec"
              },
              "devDependencies": {
                "mocha": "*",
                "should": "^4.0.4"
              },
              "keywords": [
                "find",
                "for-in",
                "for-own",
                "has",
                "has-own",
                "hasOwn",
                "javascript",
                "js",
                "key",
                "keys",
                "loop",
                "node.js",
                "object",
                "own",
                "properties",
                "property",
                "util",
                "utilities",
                "utility",
                "utils",
                "value"
              ],
              "readme": "# for-in [![NPM version](https://badge.fury.io/js/for-in.svg)](http://badge.fury.io/js/for-in)\n\n> Iterate over the own and inherited enumerable properties of an objecte, and return an object with properties that evaluate to true from the callback. Exit early by returning `false`. JavaScript/Node.js\n\n## Install\n#### Install with [npm](npmjs.org):\n\n```bash\nnpm i for-in --save\n```\n\n## Run tests\n\n```bash\nnpm test\n```\n\n## Usage\n\n```js\nvar forIn = require('for-in');\n\nvar obj = {a: 'foo', b: 'bar', c: 'baz'};\nvar values = [];\nvar keys = [];\n\nforIn(obj, function (value, key, o) {\n  keys.push(key);\n  values.push(value);\n});\n\nconsole.log(keys);\n//=> ['a', 'b', 'c'];\n\nconsole.log(values);\n//=> ['foo', 'bar', 'baz'];\n```\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.\nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on September 20, 2014._",
              "readmeFilename": "README.md",
              "_id": "for-in@0.1.3",
              "_shasum": "9e53e7b70ac05ede6fdf038d30cc5709e19125b7",
              "_from": "for-in@^0.1.1"
            },
            "path": "node_modules/object.reduce/node_modules/for-own/node_modules/for-in",
            "deps": {}
          }
        }
      }
    }
  }
}
